// Code generated by awseventgenerator/internal/generators/testcode. DO NOT EDIT.

package testsuitegenerated

import (
	"encoding/json"
	"github.com/stretchr/testify/require"
	"testing"
	"time"

	additionalproperties "github.com/webdestroya/awseventgenerator/internal/testcode/additionalproperties_gen"
)

func TestGenerated_additionalproperties(t *testing.T) {

	strVal := "someString"
	floatVal := float64(1232.1424)
	intVal := int64(1232)
	timeVal := time.Now().UTC()
	trueVal := true
	anyVal := struct {
		Thing string `json:"thinger"`
	}{Thing: "anywayanyday"}

	require.IsType(t, *new(string), strVal)
	require.IsType(t, *new(float64), floatVal)
	require.IsType(t, *new(int64), intVal)
	require.IsType(t, *new(time.Time), timeVal)
	require.IsType(t, *new(bool), trueVal)
	_ = anyVal

	t.Run("structs", func(t *testing.T) {
		t.Run("Address", func(t *testing.T) {
			genStruct := &additionalproperties.Address{
				City: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &additionalproperties.Address{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"city"`, strVal, "City")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *additionalproperties.Address{City: &strVal}.City)
			})
		})

		t.Run("Anonymous1", func(t *testing.T) {
			genStruct := &additionalproperties.Anonymous1{
				Subproperty1: &floatVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &additionalproperties.Anonymous1{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"subproperty1"`, floatVal, "Subproperty1")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, floatVal, *additionalproperties.Anonymous1{Subproperty1: &floatVal}.Subproperty1)
			})
		})

		t.Run("NotSoAnonymous", func(t *testing.T) {
			genStruct := &additionalproperties.NotSoAnonymous{
				Subproperty1: &floatVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &additionalproperties.NotSoAnonymous{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"subproperty1"`, floatVal, "Subproperty1")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, floatVal, *additionalproperties.NotSoAnonymous{Subproperty1: &floatVal}.Subproperty1)
			})
		})

		t.Run("Property6Item", func(t *testing.T) {
			genStruct := &additionalproperties.Property6Item{
				Subproperty1: &floatVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &additionalproperties.Property6Item{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"subproperty1"`, floatVal, "Subproperty1")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, floatVal, *additionalproperties.Property6Item{Subproperty1: &floatVal}.Subproperty1)
			})
		})

		t.Run("Root", func(t *testing.T) {
			genStruct := &additionalproperties.Root{
				Property1: &strVal,
				Property2: &additionalproperties.Address{
					City: &strVal,
				},
				Property3: map[string]float64{
					strVal: floatVal,
				},
				Property4: map[string]string{
					strVal: strVal,
				},
				Property5: map[string]additionalproperties.NotSoAnonymous{
					strVal: {
						Subproperty1: &floatVal,
					},
				},
				Property6: map[string]additionalproperties.Property6Item{
					strVal: {
						Subproperty1: &floatVal,
					},
				},
				Property7: map[string]map[string]additionalproperties.Anonymous1{
					strVal: {
						strVal: {
							Subproperty1: &floatVal,
						},
					},
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &additionalproperties.Root{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"property1"`, strVal, "Property1")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("property2")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("property3")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("property4")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("property5")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("property6")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("property7")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *additionalproperties.Root{Property1: &strVal}.Property1)
				require.NotNil(t, genStruct.Property2) // Lazily Tested: additionalproperties.Root.Property2 == *Address
				require.NotNil(t, genStruct.Property3) // Lazily Tested: additionalproperties.Root.Property3 == map[string]float64
				require.NotNil(t, genStruct.Property4) // Lazily Tested: additionalproperties.Root.Property4 == map[string]string
				require.NotNil(t, genStruct.Property5) // Lazily Tested: additionalproperties.Root.Property5 == map[string]NotSoAnonymous
				require.NotNil(t, genStruct.Property6) // Lazily Tested: additionalproperties.Root.Property6 == map[string]Property6Item
				require.NotNil(t, genStruct.Property7) // Lazily Tested: additionalproperties.Root.Property7 == map[string]map[string]Anonymous1
			})
		})

	})

}
