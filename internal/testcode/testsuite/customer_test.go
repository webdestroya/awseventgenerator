// Code generated by awseventgenerator/internal/generators/testcode. DO NOT EDIT.

package testsuitegenerated

import (
	"encoding/json"
	"github.com/stretchr/testify/require"
	"testing"
	"time"

	customer "github.com/webdestroya/awseventgenerator/internal/testcode/customer_gen"
)

func TestGenerated_customer(t *testing.T) {

	strVal := "someString"
	floatVal := float64(1232.1424)
	intVal := int64(1232)
	timeVal := time.Now().UTC()
	trueVal := true
	anyVal := struct {
		Thing string `json:"thinger"`
	}{Thing: "anywayanyday"}

	require.IsType(t, *new(string), strVal)
	require.IsType(t, *new(float64), floatVal)
	require.IsType(t, *new(int64), intVal)
	require.IsType(t, *new(time.Time), timeVal)
	require.IsType(t, *new(bool), trueVal)
	_ = anyVal

	t.Run("structs", func(t *testing.T) {
		t.Run("Address", func(t *testing.T) {
			genStruct := &customer.Address{
				City:          strVal,
				State:         strVal,
				StreetAddress: strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &customer.Address{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"city"`, strVal, "City")
				requireJmesMatch(t, jsearch, `"state"`, strVal, "State")
				requireJmesMatch(t, jsearch, `"street_address"`, strVal, "StreetAddress")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, customer.Address{City: strVal}.City)
				require.Equal(t, strVal, customer.Address{State: strVal}.State)
				require.Equal(t, strVal, customer.Address{StreetAddress: strVal}.StreetAddress)
			})
		})

		t.Run("Root", func(t *testing.T) {
			genStruct := &customer.Root{
				BillingAddress: &customer.Address{
					City:          strVal,
					State:         strVal,
					StreetAddress: strVal,
				},
				ShippingAddress: &customer.Address{
					City:          strVal,
					State:         strVal,
					StreetAddress: strVal,
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &customer.Root{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("billing_address")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("shipping_address")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.BillingAddress)  // Lazily Tested: customer.Root.BillingAddress == *Address
				require.NotNil(t, genStruct.ShippingAddress) // Lazily Tested: customer.Root.ShippingAddress == *Address
			})
		})

	})

}
