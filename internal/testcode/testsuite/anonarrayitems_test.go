// Code generated by awseventgenerator/internal/generators/testcode. DO NOT EDIT.

package testsuitegenerated

import (
	"encoding/json"
	"github.com/stretchr/testify/require"
	"testing"
	"time"

	anonarrayitems "github.com/webdestroya/awseventgenerator/internal/testcode/anonarrayitems_gen"
)

func TestGenerated_anonarrayitems(t *testing.T) {

	strVal := "someString"
	floatVal := float64(1232.1424)
	intVal := int64(1232)
	timeVal := time.Now().UTC()
	trueVal := true
	anyVal := struct {
		Thing string `json:"thinger"`
	}{Thing: "anywayanyday"}

	require.IsType(t, *new(string), strVal)
	require.IsType(t, *new(float64), floatVal)
	require.IsType(t, *new(int64), intVal)
	require.IsType(t, *new(time.Time), timeVal)
	require.IsType(t, *new(bool), trueVal)
	_ = anyVal

	t.Run("structs", func(t *testing.T) {
		t.Run("AnonItems", func(t *testing.T) {
			genStruct := &anonarrayitems.AnonItems{
				Foo: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &anonarrayitems.AnonItems{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"foo"`, strVal, "Foo")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *anonarrayitems.AnonItems{Foo: &strVal}.Foo)
			})
		})

		t.Run("Root", func(t *testing.T) {
			genStruct := &anonarrayitems.Root{
				Arr: []anonarrayitems.TheArrayItems{{
					Anon: []anonarrayitems.AnonItems{{
						Foo: &strVal,
					}},
					Name: &strVal,
				}},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &anonarrayitems.Root{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("arr")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.Arr) // Lazily Tested: anonarrayitems.Root.Arr == []TheArrayItems
			})
		})

		t.Run("TheArrayItems", func(t *testing.T) {
			genStruct := &anonarrayitems.TheArrayItems{
				Anon: []anonarrayitems.AnonItems{{
					Foo: &strVal,
				}},
				Name: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &anonarrayitems.TheArrayItems{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("anon")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"name"`, strVal, "Name")

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.Anon) // Lazily Tested: anonarrayitems.TheArrayItems.Anon == []AnonItems
				require.Equal(t, strVal, *anonarrayitems.TheArrayItems{Name: &strVal}.Name)
			})
		})

	})

}
