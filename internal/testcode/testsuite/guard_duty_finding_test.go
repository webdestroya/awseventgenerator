// Code generated by awseventgenerator/internal/generators/testcode. DO NOT EDIT.

package testsuitegenerated

import (
	"encoding/json"
	"github.com/stretchr/testify/require"
	"testing"
	"time"

	guard_duty_finding "github.com/webdestroya/awseventgenerator/internal/testcode/guard_duty_finding_gen"
)

func TestGenerated_guard_duty_finding(t *testing.T) {

	strVal := "someString"
	floatVal := float64(1232.1424)
	intVal := int64(1232)
	timeVal := time.Now().UTC()
	trueVal := true
	anyVal := struct {
		Thing string `json:"thinger"`
	}{Thing: "anywayanyday"}

	require.IsType(t, *new(string), strVal)
	require.IsType(t, *new(float64), floatVal)
	require.IsType(t, *new(int64), intVal)
	require.IsType(t, *new(time.Time), timeVal)
	require.IsType(t, *new(bool), trueVal)
	_ = anyVal

	t.Run("constants", func(t *testing.T) {
		require.Equal(t, `GuardDuty Finding`, guard_duty_finding.AwsEventDetailType)
		require.Equal(t, `aws.guardduty`, guard_duty_finding.AwsEventSource)
	})

	t.Run("aliases", func(t *testing.T) {
		require.IsType(t, *new(interface{}), *new(guard_duty_finding.AdditionalScannedPortsItems))
		require.IsType(t, *new(interface{}), *new(guard_duty_finding.AffectedResources))
		require.IsType(t, *new(interface{}), *new(guard_duty_finding.Ipv6AddressesItems))
		require.IsType(t, *new(interface{}), *new(guard_duty_finding.KmsKeyArn))
		require.IsType(t, *new(interface{}), *new(guard_duty_finding.Platform))
		require.IsType(t, *new(interface{}), *new(guard_duty_finding.ResourcesItems))
		require.IsType(t, *new(interface{}), *new(guard_duty_finding.SkippedVolumeDetails))
		require.IsType(t, *new(interface{}), *new(guard_duty_finding.Unusual_object))
	})

	t.Run("structs", func(t *testing.T) {
		t.Run("AccessControlList", func(t *testing.T) {
			genStruct := &guard_duty_finding.AccessControlList{
				AllowsPublicReadAccess:  &trueVal,
				AllowsPublicWriteAccess: &trueVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.AccessControlList{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"allowsPublicReadAccess"`, trueVal, "AllowsPublicReadAccess")
				requireJmesMatch(t, jsearch, `"allowsPublicWriteAccess"`, trueVal, "AllowsPublicWriteAccess")

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.AllowsPublicReadAccess)  // Lazily Tested: guard_duty_finding.AccessControlList.AllowsPublicReadAccess == *bool
				require.NotNil(t, genStruct.AllowsPublicWriteAccess) // Lazily Tested: guard_duty_finding.AccessControlList.AllowsPublicWriteAccess == *bool
			})
		})

		t.Run("AccessKeyDetails", func(t *testing.T) {
			genStruct := &guard_duty_finding.AccessKeyDetails{
				AccessKeyId: &strVal,
				PrincipalId: &strVal,
				UserName:    &strVal,
				UserType:    &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.AccessKeyDetails{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"accessKeyId"`, strVal, "AccessKeyId")
				requireJmesMatch(t, jsearch, `"principalId"`, strVal, "PrincipalId")
				requireJmesMatch(t, jsearch, `"userName"`, strVal, "UserName")
				requireJmesMatch(t, jsearch, `"userType"`, strVal, "UserType")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.AccessKeyDetails{AccessKeyId: &strVal}.AccessKeyId)
				require.Equal(t, strVal, *guard_duty_finding.AccessKeyDetails{PrincipalId: &strVal}.PrincipalId)
				require.Equal(t, strVal, *guard_duty_finding.AccessKeyDetails{UserName: &strVal}.UserName)
				require.Equal(t, strVal, *guard_duty_finding.AccessKeyDetails{UserType: &strVal}.UserType)
			})
		})

		t.Run("AccountLevelPermissions", func(t *testing.T) {
			genStruct := &guard_duty_finding.AccountLevelPermissions{
				BlockPublicAccess: &guard_duty_finding.BlockPublicAccess{
					BlockPublicAcls:       &trueVal,
					BlockPublicPolicy:     &trueVal,
					IgnorePublicAcls:      &trueVal,
					RestrictPublicBuckets: &trueVal,
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.AccountLevelPermissions{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("blockPublicAccess")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.BlockPublicAccess) // Lazily Tested: guard_duty_finding.AccountLevelPermissions.BlockPublicAccess == *BlockPublicAccess
			})
		})

		t.Run("Action", func(t *testing.T) {
			genStruct := &guard_duty_finding.Action{
				ActionType: &strVal,
				AwsApiCallAction: &guard_duty_finding.AwsApiCallAction1{
					AffectedResources: &guard_duty_finding.AffectedResources1{
						AWSCloudTrailTrail: &strVal,
						AWSEC2Instance:     &strVal,
						AWSS3Bucket:        &strVal,
					},
					Api:        &strVal,
					CallerType: &strVal,
					ErrorCode:  &strVal,
					RemoteAccountDetails: &guard_duty_finding.RemoteAccountDetails{
						AccountId:  &strVal,
						Affiliated: &trueVal,
					},
					RemoteIpDetails: &guard_duty_finding.RemoteIpDetails1{
						City: &guard_duty_finding.City1{
							CityName: &strVal,
						},
						Country: &guard_duty_finding.Country1{
							CountryName: &strVal,
						},
						GeoLocation: &guard_duty_finding.GeoLocation{
							Lat: &floatVal,
							Lon: &floatVal,
						},
						IpAddressV4: &strVal,
						Organization: &guard_duty_finding.Organization1{
							Asn:    &strVal,
							AsnOrg: &strVal,
							Isp:    &strVal,
							Org:    &strVal,
						},
					},
					ServiceName: &strVal,
				},
				DnsRequestAction: &guard_duty_finding.DnsRequestAction{
					Blocked:  &trueVal,
					Domain:   &strVal,
					Protocol: &strVal,
				},
				KubernetesApiCallAction: &guard_duty_finding.KubernetesApiCallAction{
					Parameters: &strVal,
					RemoteIpDetails: &guard_duty_finding.RemoteIpDetails2{
						City: &guard_duty_finding.City2{
							CityName: &strVal,
						},
						Country: &guard_duty_finding.Country2{
							CountryName: &strVal,
						},
						GeoLocation: &guard_duty_finding.GeoLocation{
							Lat: &floatVal,
							Lon: &floatVal,
						},
						IpAddressV4: &strVal,
						Organization: &guard_duty_finding.Organization2{
							Asn:    &strVal,
							AsnOrg: &strVal,
							Isp:    &strVal,
							Org:    &strVal,
						},
					},
					RequestUri: &strVal,
					SourceIPs:  []string{strVal},
					StatusCode: &floatVal,
					UserAgent:  &strVal,
					Verb:       &strVal,
				},
				NetworkConnectionAction: &guard_duty_finding.NetworkConnectionAction{
					Blocked:             &trueVal,
					ConnectionDirection: &strVal,
					LocalIpDetails: &guard_duty_finding.LocalIpDetails{
						IpAddressV4: &strVal,
					},
					LocalPortDetails: &guard_duty_finding.LocalPortDetails{
						Port:     &floatVal,
						PortName: &strVal,
					},
					Protocol: &strVal,
					RemoteIpDetails: &guard_duty_finding.RemoteIpDetails3{
						City: &guard_duty_finding.City3{
							CityName: &strVal,
						},
						Country: &guard_duty_finding.Country3{
							CountryName: &strVal,
						},
						GeoLocation: &guard_duty_finding.GeoLocation{
							Lat: &floatVal,
							Lon: &floatVal,
						},
						IpAddressV4: &strVal,
						Organization: &guard_duty_finding.Organization3{
							Asn:    &strVal,
							AsnOrg: &strVal,
							Isp:    &strVal,
							Org:    &strVal,
						},
					},
					RemotePortDetails: &guard_duty_finding.RemotePortDetails{
						Port:     &floatVal,
						PortName: &strVal,
					},
				},
				PortProbeAction: &guard_duty_finding.PortProbeAction{
					Blocked: &trueVal,
					PortProbeDetails: []guard_duty_finding.PortProbeActionItem{{
						LocalIpDetails: &guard_duty_finding.LocalIpDetails1{
							IpAddressV4: strVal,
						},
						LocalPortDetails: &guard_duty_finding.LocalPortDetails1{
							Port:     floatVal,
							PortName: strVal,
						},
						RemoteIpDetails: &guard_duty_finding.RemoteIpDetails4{
							City: &guard_duty_finding.City4{
								CityName: strVal,
							},
							Country: &guard_duty_finding.Country4{
								CountryName: strVal,
							},
							GeoLocation: &guard_duty_finding.GeoLocation1{
								Lat: floatVal,
								Lon: floatVal,
							},
							IpAddressV4: strVal,
							Organization: &guard_duty_finding.Organization4{
								Asn:    strVal,
								AsnOrg: strVal,
								Isp:    strVal,
								Org:    strVal,
							},
						},
					}},
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.Action{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"actionType"`, strVal, "ActionType")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("awsApiCallAction")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("dnsRequestAction")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("kubernetesApiCallAction")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("networkConnectionAction")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("portProbeAction")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.Action{ActionType: &strVal}.ActionType)
				require.NotNil(t, genStruct.AwsApiCallAction)        // Lazily Tested: guard_duty_finding.Action.AwsApiCallAction == *AwsApiCallAction1
				require.NotNil(t, genStruct.DnsRequestAction)        // Lazily Tested: guard_duty_finding.Action.DnsRequestAction == *DnsRequestAction
				require.NotNil(t, genStruct.KubernetesApiCallAction) // Lazily Tested: guard_duty_finding.Action.KubernetesApiCallAction == *KubernetesApiCallAction
				require.NotNil(t, genStruct.NetworkConnectionAction) // Lazily Tested: guard_duty_finding.Action.NetworkConnectionAction == *NetworkConnectionAction
				require.NotNil(t, genStruct.PortProbeAction)         // Lazily Tested: guard_duty_finding.Action.PortProbeAction == *PortProbeAction
			})
		})

		t.Run("AdditionalInfo", func(t *testing.T) {
			genStruct := &guard_duty_finding.AdditionalInfo{
				AdditionalScannedPorts: []guard_duty_finding.AdditionalScannedPortsItems{anyVal},
				Anomalies: &guard_duty_finding.Anomalies{
					AnomalousAPIs: &strVal,
				},
				ApiCalls: []guard_duty_finding.AdditionalInfoItem{{
					Count:     floatVal,
					FirstSeen: floatVal,
					LastSeen:  floatVal,
					Name:      strVal,
				}},
				Domain:    &strVal,
				InBytes:   &strVal,
				LocalPort: &strVal,
				NewPolicy: &guard_duty_finding.NewPolicy{
					AllowUsersToChangePassword: &strVal,
					HardExpiry:                 &strVal,
					MaxPasswordAge:             &strVal,
					MinimumPasswordLength:      &strVal,
					PasswordReusePrevention:    &strVal,
					RequireLowercaseCharacters: &strVal,
					RequireNumbers:             &strVal,
					RequireSymbols:             &strVal,
					RequireUppercaseCharacters: &strVal,
				},
				OldPolicy: &guard_duty_finding.OldPolicy{
					AllowUsersToChangePassword: &strVal,
					HardExpiry:                 &strVal,
					MaxPasswordAge:             &strVal,
					MinimumPasswordLength:      &strVal,
					PasswordReusePrevention:    &strVal,
					RequireLowercaseCharacters: &strVal,
					RequireNumbers:             &strVal,
					RequireSymbols:             &strVal,
					RequireUppercaseCharacters: &strVal,
				},
				OutBytes:           &strVal,
				PortsScannedSample: []float64{floatVal},
				ProfiledBehavior: &guard_duty_finding.ProfiledBehavior{
					FrequentProfiledAPIsAccountProfiling:                      &strVal,
					FrequentProfiledAPIsUserIdentityProfiling:                 &strVal,
					FrequentProfiledASNsAccountProfiling:                      &strVal,
					FrequentProfiledASNsBucketProfiling:                       &strVal,
					FrequentProfiledASNsUserIdentityProfiling:                 &strVal,
					FrequentProfiledBucketsAccountProfiling:                   &strVal,
					FrequentProfiledBucketsUserIdentityProfiling:              &strVal,
					FrequentProfiledUserAgentsAccountProfiling:                &strVal,
					FrequentProfiledUserAgentsUserIdentityProfiling:           &strVal,
					FrequentProfiledUserNamesAccountProfiling:                 &strVal,
					FrequentProfiledUserNamesBucketProfiling:                  &strVal,
					FrequentProfiledUserTypesAccountProfiling:                 &strVal,
					InfrequentProfiledAPIsAccountProfiling:                    &strVal,
					InfrequentProfiledAPIsUserIdentityProfiling:               &strVal,
					InfrequentProfiledASNsAccountProfiling:                    &strVal,
					InfrequentProfiledASNsBucketProfiling:                     &strVal,
					InfrequentProfiledASNsUserIdentityProfiling:               &strVal,
					InfrequentProfiledBucketsAccountProfiling:                 &strVal,
					InfrequentProfiledBucketsUserIdentityProfiling:            &strVal,
					InfrequentProfiledUserAgentsAccountProfiling:              &strVal,
					InfrequentProfiledUserAgentsUserIdentityProfiling:         &strVal,
					InfrequentProfiledUserNamesAccountProfiling:               &strVal,
					InfrequentProfiledUserNamesBucketProfiling:                &strVal,
					InfrequentProfiledUserTypesAccountProfiling:               &strVal,
					NumberOfHistoricalDailyAvgAPIsBucketProfiling:             &strVal,
					NumberOfHistoricalDailyAvgAPIsBucketUserIdentityProfiling: &strVal,
					NumberOfHistoricalDailyAvgAPIsUserIdentityProfiling:       &strVal,
					NumberOfHistoricalDailyMaxAPIsBucketProfiling:             &strVal,
					NumberOfHistoricalDailyMaxAPIsBucketUserIdentityProfiling: &strVal,
					NumberOfHistoricalDailyMaxAPIsUserIdentityProfiling:       &strVal,
					RareProfiledAPIsAccountProfiling:                          &strVal,
					RareProfiledAPIsUserIdentityProfiling:                     &strVal,
					RareProfiledASNsAccountProfiling:                          &strVal,
					RareProfiledASNsBucketProfiling:                           &strVal,
					RareProfiledASNsUserIdentityProfiling:                     &strVal,
					RareProfiledBucketsAccountProfiling:                       &strVal,
					RareProfiledBucketsUserIdentityProfiling:                  &strVal,
					RareProfiledUserAgentsAccountProfiling:                    &strVal,
					RareProfiledUserAgentsUserIdentityProfiling:               &strVal,
					RareProfiledUserNamesAccountProfiling:                     &strVal,
					RareProfiledUserNamesBucketProfiling:                      &strVal,
					RareProfiledUserTypesAccountProfiling:                     &strVal,
				},
				RecentCredentials: []guard_duty_finding.AdditionalInfoItem1{{
					AccessKeyId: strVal,
					IpAddressV4: strVal,
					PrincipalId: strVal,
				}},
				Sample:         trueVal,
				ScannedPort:    &floatVal,
				ThreatListName: &strVal,
				ThreatName:     &strVal,
				Type:           strVal,
				Unusual:        anyVal,
				UnusualBehavior: &guard_duty_finding.UnusualBehavior{
					IsUnusualUserIdentity:                              &strVal,
					NumberOfPast24HoursAPIsBucketProfiling:             &strVal,
					NumberOfPast24HoursAPIsBucketUserIdentityProfiling: &strVal,
					NumberOfPast24HoursAPIsUserIdentityProfiling:       &strVal,
					UnusualAPIsAccountProfiling:                        &strVal,
					UnusualAPIsUserIdentityProfiling:                   &strVal,
					UnusualASNsAccountProfiling:                        &strVal,
					UnusualASNsBucketProfiling:                         &strVal,
					UnusualASNsUserIdentityProfiling:                   &strVal,
					UnusualBucketsAccountProfiling:                     &strVal,
					UnusualBucketsUserIdentityProfiling:                &strVal,
					UnusualUserAgentsAccountProfiling:                  &strVal,
					UnusualUserAgentsUserIdentityProfiling:             &strVal,
					UnusualUserNamesAccountProfiling:                   &strVal,
					UnusualUserNamesBucketProfiling:                    &strVal,
					UnusualUserTypesAccountProfiling:                   &strVal,
				},
				UnusualProtocol: &strVal,
				UserAgent: &guard_duty_finding.UserAgent{
					FullUserAgent:     &strVal,
					UserAgentCategory: &strVal,
				},
				Value: strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.AdditionalInfo{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("additionalScannedPorts")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("anomalies")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("apiCalls")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"domain"`, strVal, "Domain")
				requireJmesMatch(t, jsearch, `"inBytes"`, strVal, "InBytes")
				requireJmesMatch(t, jsearch, `"localPort"`, strVal, "LocalPort")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("newPolicy")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("oldPolicy")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"outBytes"`, strVal, "OutBytes")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("portsScannedSample")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("profiledBehavior")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("recentCredentials")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"sample"`, trueVal, "Sample")
				requireJmesMatch(t, jsearch, `"scannedPort"`, floatVal, "ScannedPort")
				requireJmesMatch(t, jsearch, `"threatListName"`, strVal, "ThreatListName")
				requireJmesMatch(t, jsearch, `"threatName"`, strVal, "ThreatName")
				requireJmesMatch(t, jsearch, `"type"`, strVal, "Type")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("unusual")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("unusualBehavior")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"unusualProtocol"`, strVal, "UnusualProtocol")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("userAgent")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"value"`, strVal, "Value")

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.AdditionalScannedPorts) // Lazily Tested: guard_duty_finding.AdditionalInfo.AdditionalScannedPorts == []AdditionalScannedPortsItems
				require.NotNil(t, genStruct.Anomalies)              // Lazily Tested: guard_duty_finding.AdditionalInfo.Anomalies == *Anomalies
				require.NotNil(t, genStruct.ApiCalls)               // Lazily Tested: guard_duty_finding.AdditionalInfo.ApiCalls == []AdditionalInfoItem
				require.Equal(t, strVal, *guard_duty_finding.AdditionalInfo{Domain: &strVal}.Domain)
				require.Equal(t, strVal, *guard_duty_finding.AdditionalInfo{InBytes: &strVal}.InBytes)
				require.Equal(t, strVal, *guard_duty_finding.AdditionalInfo{LocalPort: &strVal}.LocalPort)
				require.NotNil(t, genStruct.NewPolicy) // Lazily Tested: guard_duty_finding.AdditionalInfo.NewPolicy == *NewPolicy
				require.NotNil(t, genStruct.OldPolicy) // Lazily Tested: guard_duty_finding.AdditionalInfo.OldPolicy == *OldPolicy
				require.Equal(t, strVal, *guard_duty_finding.AdditionalInfo{OutBytes: &strVal}.OutBytes)
				require.NotNil(t, genStruct.PortsScannedSample) // Lazily Tested: guard_duty_finding.AdditionalInfo.PortsScannedSample == []float64
				require.NotNil(t, genStruct.ProfiledBehavior)   // Lazily Tested: guard_duty_finding.AdditionalInfo.ProfiledBehavior == *ProfiledBehavior
				require.NotNil(t, genStruct.RecentCredentials)  // Lazily Tested: guard_duty_finding.AdditionalInfo.RecentCredentials == []AdditionalInfoItem1
				require.NotNil(t, genStruct.Sample)             // Lazily Tested: guard_duty_finding.AdditionalInfo.Sample == bool
				require.Equal(t, floatVal, *guard_duty_finding.AdditionalInfo{ScannedPort: &floatVal}.ScannedPort)
				require.Equal(t, strVal, *guard_duty_finding.AdditionalInfo{ThreatListName: &strVal}.ThreatListName)
				require.Equal(t, strVal, *guard_duty_finding.AdditionalInfo{ThreatName: &strVal}.ThreatName)
				require.Equal(t, strVal, guard_duty_finding.AdditionalInfo{Type: strVal}.Type)
				require.NotNil(t, genStruct.Unusual)         // Lazily Tested: guard_duty_finding.AdditionalInfo.Unusual == interface{}
				require.NotNil(t, genStruct.UnusualBehavior) // Lazily Tested: guard_duty_finding.AdditionalInfo.UnusualBehavior == *UnusualBehavior
				require.Equal(t, strVal, *guard_duty_finding.AdditionalInfo{UnusualProtocol: &strVal}.UnusualProtocol)
				require.NotNil(t, genStruct.UserAgent) // Lazily Tested: guard_duty_finding.AdditionalInfo.UserAgent == *UserAgent
				require.Equal(t, strVal, guard_duty_finding.AdditionalInfo{Value: strVal}.Value)
			})
		})

		t.Run("AdditionalInfoItem", func(t *testing.T) {
			genStruct := &guard_duty_finding.AdditionalInfoItem{
				Count:     floatVal,
				FirstSeen: floatVal,
				LastSeen:  floatVal,
				Name:      strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.AdditionalInfoItem{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"count"`, floatVal, "Count")
				requireJmesMatch(t, jsearch, `"firstSeen"`, floatVal, "FirstSeen")
				requireJmesMatch(t, jsearch, `"lastSeen"`, floatVal, "LastSeen")
				requireJmesMatch(t, jsearch, `"name"`, strVal, "Name")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, floatVal, guard_duty_finding.AdditionalInfoItem{Count: floatVal}.Count)
				require.Equal(t, floatVal, guard_duty_finding.AdditionalInfoItem{FirstSeen: floatVal}.FirstSeen)
				require.Equal(t, floatVal, guard_duty_finding.AdditionalInfoItem{LastSeen: floatVal}.LastSeen)
				require.Equal(t, strVal, guard_duty_finding.AdditionalInfoItem{Name: strVal}.Name)
			})
		})

		t.Run("AdditionalInfoItem1", func(t *testing.T) {
			genStruct := &guard_duty_finding.AdditionalInfoItem1{
				AccessKeyId: strVal,
				IpAddressV4: strVal,
				PrincipalId: strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.AdditionalInfoItem1{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"accessKeyId"`, strVal, "AccessKeyId")
				requireJmesMatch(t, jsearch, `"ipAddressV4"`, strVal, "IpAddressV4")
				requireJmesMatch(t, jsearch, `"principalId"`, strVal, "PrincipalId")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, guard_duty_finding.AdditionalInfoItem1{AccessKeyId: strVal}.AccessKeyId)
				require.Equal(t, strVal, guard_duty_finding.AdditionalInfoItem1{IpAddressV4: strVal}.IpAddressV4)
				require.Equal(t, strVal, guard_duty_finding.AdditionalInfoItem1{PrincipalId: strVal}.PrincipalId)
			})
		})

		t.Run("AffectedResources1", func(t *testing.T) {
			genStruct := &guard_duty_finding.AffectedResources1{
				AWSCloudTrailTrail: &strVal,
				AWSEC2Instance:     &strVal,
				AWSS3Bucket:        &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.AffectedResources1{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"AWS-CloudTrail-Trail"`, strVal, "AWSCloudTrailTrail")
				requireJmesMatch(t, jsearch, `"AWS-EC2-Instance"`, strVal, "AWSEC2Instance")
				requireJmesMatch(t, jsearch, `"AWS-S3-Bucket"`, strVal, "AWSS3Bucket")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.AffectedResources1{AWSCloudTrailTrail: &strVal}.AWSCloudTrailTrail)
				require.Equal(t, strVal, *guard_duty_finding.AffectedResources1{AWSEC2Instance: &strVal}.AWSEC2Instance)
				require.Equal(t, strVal, *guard_duty_finding.AffectedResources1{AWSS3Bucket: &strVal}.AWSS3Bucket)
			})
		})

		t.Run("Anomalies", func(t *testing.T) {
			genStruct := &guard_duty_finding.Anomalies{
				AnomalousAPIs: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.Anomalies{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"anomalousAPIs"`, strVal, "AnomalousAPIs")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.Anomalies{AnomalousAPIs: &strVal}.AnomalousAPIs)
			})
		})

		t.Run("AwsApiCallAction", func(t *testing.T) {
			genStruct := &guard_duty_finding.AwsApiCallAction{
				AffectedResources: anyVal,
				Api:               &strVal,
				CallerType:        &strVal,
				ErrorCode:         &strVal,
				RemoteIpDetails: &guard_duty_finding.RemoteIpDetails{
					City: &guard_duty_finding.City{
						CityName: &strVal,
					},
					Country: &guard_duty_finding.Country{
						CountryName: &strVal,
					},
					GeoLocation: &guard_duty_finding.GeoLocation{
						Lat: &floatVal,
						Lon: &floatVal,
					},
					IpAddressV4: &strVal,
					Organization: &guard_duty_finding.Organization{
						Asn:    &strVal,
						AsnOrg: &strVal,
						Isp:    &strVal,
						Org:    &strVal,
					},
				},
				ServiceName: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.AwsApiCallAction{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("affectedResources")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"api"`, strVal, "Api")
				requireJmesMatch(t, jsearch, `"callerType"`, strVal, "CallerType")
				requireJmesMatch(t, jsearch, `"errorCode"`, strVal, "ErrorCode")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("remoteIpDetails")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"serviceName"`, strVal, "ServiceName")

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.AffectedResources) // Lazily Tested: guard_duty_finding.AwsApiCallAction.AffectedResources == AffectedResources
				require.Equal(t, strVal, *guard_duty_finding.AwsApiCallAction{Api: &strVal}.Api)
				require.Equal(t, strVal, *guard_duty_finding.AwsApiCallAction{CallerType: &strVal}.CallerType)
				require.Equal(t, strVal, *guard_duty_finding.AwsApiCallAction{ErrorCode: &strVal}.ErrorCode)
				require.NotNil(t, genStruct.RemoteIpDetails) // Lazily Tested: guard_duty_finding.AwsApiCallAction.RemoteIpDetails == *RemoteIpDetails
				require.Equal(t, strVal, *guard_duty_finding.AwsApiCallAction{ServiceName: &strVal}.ServiceName)
			})
		})

		t.Run("AwsApiCallAction1", func(t *testing.T) {
			genStruct := &guard_duty_finding.AwsApiCallAction1{
				AffectedResources: &guard_duty_finding.AffectedResources1{
					AWSCloudTrailTrail: &strVal,
					AWSEC2Instance:     &strVal,
					AWSS3Bucket:        &strVal,
				},
				Api:        &strVal,
				CallerType: &strVal,
				ErrorCode:  &strVal,
				RemoteAccountDetails: &guard_duty_finding.RemoteAccountDetails{
					AccountId:  &strVal,
					Affiliated: &trueVal,
				},
				RemoteIpDetails: &guard_duty_finding.RemoteIpDetails1{
					City: &guard_duty_finding.City1{
						CityName: &strVal,
					},
					Country: &guard_duty_finding.Country1{
						CountryName: &strVal,
					},
					GeoLocation: &guard_duty_finding.GeoLocation{
						Lat: &floatVal,
						Lon: &floatVal,
					},
					IpAddressV4: &strVal,
					Organization: &guard_duty_finding.Organization1{
						Asn:    &strVal,
						AsnOrg: &strVal,
						Isp:    &strVal,
						Org:    &strVal,
					},
				},
				ServiceName: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.AwsApiCallAction1{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("affectedResources")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"api"`, strVal, "Api")
				requireJmesMatch(t, jsearch, `"callerType"`, strVal, "CallerType")
				requireJmesMatch(t, jsearch, `"errorCode"`, strVal, "ErrorCode")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("remoteAccountDetails")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("remoteIpDetails")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"serviceName"`, strVal, "ServiceName")

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.AffectedResources) // Lazily Tested: guard_duty_finding.AwsApiCallAction1.AffectedResources == *AffectedResources1
				require.Equal(t, strVal, *guard_duty_finding.AwsApiCallAction1{Api: &strVal}.Api)
				require.Equal(t, strVal, *guard_duty_finding.AwsApiCallAction1{CallerType: &strVal}.CallerType)
				require.Equal(t, strVal, *guard_duty_finding.AwsApiCallAction1{ErrorCode: &strVal}.ErrorCode)
				require.NotNil(t, genStruct.RemoteAccountDetails) // Lazily Tested: guard_duty_finding.AwsApiCallAction1.RemoteAccountDetails == *RemoteAccountDetails
				require.NotNil(t, genStruct.RemoteIpDetails)      // Lazily Tested: guard_duty_finding.AwsApiCallAction1.RemoteIpDetails == *RemoteIpDetails1
				require.Equal(t, strVal, *guard_duty_finding.AwsApiCallAction1{ServiceName: &strVal}.ServiceName)
			})
		})

		t.Run("BlockPublicAccess", func(t *testing.T) {
			genStruct := &guard_duty_finding.BlockPublicAccess{
				BlockPublicAcls:       &trueVal,
				BlockPublicPolicy:     &trueVal,
				IgnorePublicAcls:      &trueVal,
				RestrictPublicBuckets: &trueVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.BlockPublicAccess{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"blockPublicAcls"`, trueVal, "BlockPublicAcls")
				requireJmesMatch(t, jsearch, `"blockPublicPolicy"`, trueVal, "BlockPublicPolicy")
				requireJmesMatch(t, jsearch, `"ignorePublicAcls"`, trueVal, "IgnorePublicAcls")
				requireJmesMatch(t, jsearch, `"restrictPublicBuckets"`, trueVal, "RestrictPublicBuckets")

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.BlockPublicAcls)       // Lazily Tested: guard_duty_finding.BlockPublicAccess.BlockPublicAcls == *bool
				require.NotNil(t, genStruct.BlockPublicPolicy)     // Lazily Tested: guard_duty_finding.BlockPublicAccess.BlockPublicPolicy == *bool
				require.NotNil(t, genStruct.IgnorePublicAcls)      // Lazily Tested: guard_duty_finding.BlockPublicAccess.IgnorePublicAcls == *bool
				require.NotNil(t, genStruct.RestrictPublicBuckets) // Lazily Tested: guard_duty_finding.BlockPublicAccess.RestrictPublicBuckets == *bool
			})
		})

		t.Run("BucketLevelPermissions", func(t *testing.T) {
			genStruct := &guard_duty_finding.BucketLevelPermissions{
				AccessControlList: &guard_duty_finding.AccessControlList{
					AllowsPublicReadAccess:  &trueVal,
					AllowsPublicWriteAccess: &trueVal,
				},
				BlockPublicAccess: &guard_duty_finding.BlockPublicAccess{
					BlockPublicAcls:       &trueVal,
					BlockPublicPolicy:     &trueVal,
					IgnorePublicAcls:      &trueVal,
					RestrictPublicBuckets: &trueVal,
				},
				BucketPolicy: &guard_duty_finding.AccessControlList{
					AllowsPublicReadAccess:  &trueVal,
					AllowsPublicWriteAccess: &trueVal,
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.BucketLevelPermissions{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("accessControlList")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("blockPublicAccess")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("bucketPolicy")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.AccessControlList) // Lazily Tested: guard_duty_finding.BucketLevelPermissions.AccessControlList == *AccessControlList
				require.NotNil(t, genStruct.BlockPublicAccess) // Lazily Tested: guard_duty_finding.BucketLevelPermissions.BlockPublicAccess == *BlockPublicAccess
				require.NotNil(t, genStruct.BucketPolicy)      // Lazily Tested: guard_duty_finding.BucketLevelPermissions.BucketPolicy == *AccessControlList
			})
		})

		t.Run("City", func(t *testing.T) {
			genStruct := &guard_duty_finding.City{
				CityName: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.City{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"cityName"`, strVal, "CityName")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.City{CityName: &strVal}.CityName)
			})
		})

		t.Run("City1", func(t *testing.T) {
			genStruct := &guard_duty_finding.City1{
				CityName: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.City1{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"cityName"`, strVal, "CityName")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.City1{CityName: &strVal}.CityName)
			})
		})

		t.Run("City2", func(t *testing.T) {
			genStruct := &guard_duty_finding.City2{
				CityName: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.City2{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"cityName"`, strVal, "CityName")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.City2{CityName: &strVal}.CityName)
			})
		})

		t.Run("City3", func(t *testing.T) {
			genStruct := &guard_duty_finding.City3{
				CityName: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.City3{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"cityName"`, strVal, "CityName")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.City3{CityName: &strVal}.CityName)
			})
		})

		t.Run("City4", func(t *testing.T) {
			genStruct := &guard_duty_finding.City4{
				CityName: strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.City4{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"cityName"`, strVal, "CityName")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, guard_duty_finding.City4{CityName: strVal}.CityName)
			})
		})

		t.Run("ContainerDetails", func(t *testing.T) {
			genStruct := &guard_duty_finding.ContainerDetails{
				Id:    &strVal,
				Image: &strVal,
				Name:  &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.ContainerDetails{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"id"`, strVal, "Id")
				requireJmesMatch(t, jsearch, `"image"`, strVal, "Image")
				requireJmesMatch(t, jsearch, `"name"`, strVal, "Name")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.ContainerDetails{Id: &strVal}.Id)
				require.Equal(t, strVal, *guard_duty_finding.ContainerDetails{Image: &strVal}.Image)
				require.Equal(t, strVal, *guard_duty_finding.ContainerDetails{Name: &strVal}.Name)
			})
		})

		t.Run("Country", func(t *testing.T) {
			genStruct := &guard_duty_finding.Country{
				CountryName: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.Country{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"countryName"`, strVal, "CountryName")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.Country{CountryName: &strVal}.CountryName)
			})
		})

		t.Run("Country1", func(t *testing.T) {
			genStruct := &guard_duty_finding.Country1{
				CountryName: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.Country1{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"countryName"`, strVal, "CountryName")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.Country1{CountryName: &strVal}.CountryName)
			})
		})

		t.Run("Country2", func(t *testing.T) {
			genStruct := &guard_duty_finding.Country2{
				CountryName: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.Country2{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"countryName"`, strVal, "CountryName")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.Country2{CountryName: &strVal}.CountryName)
			})
		})

		t.Run("Country3", func(t *testing.T) {
			genStruct := &guard_duty_finding.Country3{
				CountryName: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.Country3{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"countryName"`, strVal, "CountryName")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.Country3{CountryName: &strVal}.CountryName)
			})
		})

		t.Run("Country4", func(t *testing.T) {
			genStruct := &guard_duty_finding.Country4{
				CountryName: strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.Country4{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"countryName"`, strVal, "CountryName")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, guard_duty_finding.Country4{CountryName: strVal}.CountryName)
			})
		})

		t.Run("DefaultServerSideEncryption", func(t *testing.T) {
			genStruct := &guard_duty_finding.DefaultServerSideEncryption{
				EncryptionType:  &strVal,
				KmsMasterKeyArn: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.DefaultServerSideEncryption{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"encryptionType"`, strVal, "EncryptionType")
				requireJmesMatch(t, jsearch, `"kmsMasterKeyArn"`, strVal, "KmsMasterKeyArn")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.DefaultServerSideEncryption{EncryptionType: &strVal}.EncryptionType)
				require.Equal(t, strVal, *guard_duty_finding.DefaultServerSideEncryption{KmsMasterKeyArn: &strVal}.KmsMasterKeyArn)
			})
		})

		t.Run("DnsRequestAction", func(t *testing.T) {
			genStruct := &guard_duty_finding.DnsRequestAction{
				Blocked:  &trueVal,
				Domain:   &strVal,
				Protocol: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.DnsRequestAction{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"blocked"`, trueVal, "Blocked")
				requireJmesMatch(t, jsearch, `"domain"`, strVal, "Domain")
				requireJmesMatch(t, jsearch, `"protocol"`, strVal, "Protocol")

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.Blocked) // Lazily Tested: guard_duty_finding.DnsRequestAction.Blocked == *bool
				require.Equal(t, strVal, *guard_duty_finding.DnsRequestAction{Domain: &strVal}.Domain)
				require.Equal(t, strVal, *guard_duty_finding.DnsRequestAction{Protocol: &strVal}.Protocol)
			})
		})

		t.Run("EbsVolumeDetails", func(t *testing.T) {
			genStruct := &guard_duty_finding.EbsVolumeDetails{
				ScannedVolumeDetails: []guard_duty_finding.EbsVolumeDetailsItem{{
					DeviceName:     strVal,
					EncryptionType: strVal,
					KmsKeyArn:      anyVal,
					SnapshotArn:    strVal,
					VolumeArn:      strVal,
					VolumeSizeInGB: floatVal,
					VolumeType:     strVal,
				}},
				SkippedVolumeDetails: anyVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.EbsVolumeDetails{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("scannedVolumeDetails")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("skippedVolumeDetails")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.ScannedVolumeDetails) // Lazily Tested: guard_duty_finding.EbsVolumeDetails.ScannedVolumeDetails == []EbsVolumeDetailsItem
				require.NotNil(t, genStruct.SkippedVolumeDetails) // Lazily Tested: guard_duty_finding.EbsVolumeDetails.SkippedVolumeDetails == SkippedVolumeDetails
			})
		})

		t.Run("EbsVolumeDetailsItem", func(t *testing.T) {
			genStruct := &guard_duty_finding.EbsVolumeDetailsItem{
				DeviceName:     strVal,
				EncryptionType: strVal,
				KmsKeyArn:      anyVal,
				SnapshotArn:    strVal,
				VolumeArn:      strVal,
				VolumeSizeInGB: floatVal,
				VolumeType:     strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.EbsVolumeDetailsItem{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"deviceName"`, strVal, "DeviceName")
				requireJmesMatch(t, jsearch, `"encryptionType"`, strVal, "EncryptionType")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("kmsKeyArn")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"snapshotArn"`, strVal, "SnapshotArn")
				requireJmesMatch(t, jsearch, `"volumeArn"`, strVal, "VolumeArn")
				requireJmesMatch(t, jsearch, `"volumeSizeInGB"`, floatVal, "VolumeSizeInGB")
				requireJmesMatch(t, jsearch, `"volumeType"`, strVal, "VolumeType")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, guard_duty_finding.EbsVolumeDetailsItem{DeviceName: strVal}.DeviceName)
				require.Equal(t, strVal, guard_duty_finding.EbsVolumeDetailsItem{EncryptionType: strVal}.EncryptionType)
				require.NotNil(t, genStruct.KmsKeyArn) // Lazily Tested: guard_duty_finding.EbsVolumeDetailsItem.KmsKeyArn == KmsKeyArn
				require.Equal(t, strVal, guard_duty_finding.EbsVolumeDetailsItem{SnapshotArn: strVal}.SnapshotArn)
				require.Equal(t, strVal, guard_duty_finding.EbsVolumeDetailsItem{VolumeArn: strVal}.VolumeArn)
				require.Equal(t, floatVal, guard_duty_finding.EbsVolumeDetailsItem{VolumeSizeInGB: floatVal}.VolumeSizeInGB)
				require.Equal(t, strVal, guard_duty_finding.EbsVolumeDetailsItem{VolumeType: strVal}.VolumeType)
			})
		})

		t.Run("EbsVolumeScanDetails", func(t *testing.T) {
			genStruct := &guard_duty_finding.EbsVolumeScanDetails{
				ScanCompletedAt: &floatVal,
				ScanDetections: &guard_duty_finding.ScanDetections{
					HighestSeverityThreatDetails: &guard_duty_finding.HighestSeverityThreatDetails{
						Count:      &floatVal,
						Severity:   &strVal,
						ThreatName: &strVal,
					},
					ScannedItemCount: &guard_duty_finding.ScannedItemCount{
						Files:   &floatVal,
						TotalGb: &floatVal,
						Volumes: &floatVal,
					},
					ThreatDetectedByName: &guard_duty_finding.ThreatDetectedByName{
						ItemCount: &floatVal,
						Shortened: &trueVal,
						ThreatNames: []guard_duty_finding.ThreatDetectedByNameItem{{
							FilePaths: []guard_duty_finding.ThreatDetectedByNameItemItem{{
								FileName:  strVal,
								FilePath:  strVal,
								Hash:      strVal,
								VolumeArn: strVal,
							}},
							ItemCount: floatVal,
							Name:      strVal,
							Severity:  strVal,
						}},
						UniqueThreatNameCount: &floatVal,
					},
					ThreatsDetectedItemCount: &guard_duty_finding.ThreatsDetectedItemCount{
						Files: &floatVal,
					},
				},
				ScanId:           &strVal,
				ScanStartedAt:    &floatVal,
				Sources:          []string{strVal},
				TriggerFindingId: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.EbsVolumeScanDetails{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"scanCompletedAt"`, floatVal, "ScanCompletedAt")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("scanDetections")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"scanId"`, strVal, "ScanId")
				requireJmesMatch(t, jsearch, `"scanStartedAt"`, floatVal, "ScanStartedAt")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("sources")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"triggerFindingId"`, strVal, "TriggerFindingId")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, floatVal, *guard_duty_finding.EbsVolumeScanDetails{ScanCompletedAt: &floatVal}.ScanCompletedAt)
				require.NotNil(t, genStruct.ScanDetections) // Lazily Tested: guard_duty_finding.EbsVolumeScanDetails.ScanDetections == *ScanDetections
				require.Equal(t, strVal, *guard_duty_finding.EbsVolumeScanDetails{ScanId: &strVal}.ScanId)
				require.Equal(t, floatVal, *guard_duty_finding.EbsVolumeScanDetails{ScanStartedAt: &floatVal}.ScanStartedAt)
				require.Contains(t, guard_duty_finding.EbsVolumeScanDetails{Sources: []string{strVal}}.Sources, strVal)
				require.Equal(t, strVal, *guard_duty_finding.EbsVolumeScanDetails{TriggerFindingId: &strVal}.TriggerFindingId)
			})
		})

		t.Run("EcsClusterDetails", func(t *testing.T) {
			genStruct := &guard_duty_finding.EcsClusterDetails{
				Arn:    &strVal,
				Name:   &strVal,
				Status: &strVal,
				Tags: []guard_duty_finding.EcsClusterDetailsItem{{
					Key:   strVal,
					Value: strVal,
				}},
				TaskDetails: &guard_duty_finding.TaskDetails{
					Arn: &strVal,
					Containers: []guard_duty_finding.TaskDetailsItem{{
						Image: strVal,
						Name:  strVal,
					}},
					CreatedAt:     &floatVal,
					DefinitionArn: &strVal,
					StartedAt:     &floatVal,
					StartedBy:     &strVal,
					Version:       &strVal,
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.EcsClusterDetails{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"arn"`, strVal, "Arn")
				requireJmesMatch(t, jsearch, `"name"`, strVal, "Name")
				requireJmesMatch(t, jsearch, `"status"`, strVal, "Status")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("tags")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("taskDetails")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.EcsClusterDetails{Arn: &strVal}.Arn)
				require.Equal(t, strVal, *guard_duty_finding.EcsClusterDetails{Name: &strVal}.Name)
				require.Equal(t, strVal, *guard_duty_finding.EcsClusterDetails{Status: &strVal}.Status)
				require.NotNil(t, genStruct.Tags)        // Lazily Tested: guard_duty_finding.EcsClusterDetails.Tags == []EcsClusterDetailsItem
				require.NotNil(t, genStruct.TaskDetails) // Lazily Tested: guard_duty_finding.EcsClusterDetails.TaskDetails == *TaskDetails
			})
		})

		t.Run("EcsClusterDetailsItem", func(t *testing.T) {
			genStruct := &guard_duty_finding.EcsClusterDetailsItem{
				Key:   strVal,
				Value: strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.EcsClusterDetailsItem{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"key"`, strVal, "Key")
				requireJmesMatch(t, jsearch, `"value"`, strVal, "Value")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, guard_duty_finding.EcsClusterDetailsItem{Key: strVal}.Key)
				require.Equal(t, strVal, guard_duty_finding.EcsClusterDetailsItem{Value: strVal}.Value)
			})
		})

		t.Run("EksClusterDetails", func(t *testing.T) {
			genStruct := &guard_duty_finding.EksClusterDetails{
				Arn:       &strVal,
				CreatedAt: &floatVal,
				Name:      &strVal,
				Status:    &strVal,
				Tags: []guard_duty_finding.EcsClusterDetailsItem{{
					Key:   strVal,
					Value: strVal,
				}},
				VpcId: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.EksClusterDetails{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"arn"`, strVal, "Arn")
				requireJmesMatch(t, jsearch, `"createdAt"`, floatVal, "CreatedAt")
				requireJmesMatch(t, jsearch, `"name"`, strVal, "Name")
				requireJmesMatch(t, jsearch, `"status"`, strVal, "Status")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("tags")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"vpcId"`, strVal, "VpcId")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.EksClusterDetails{Arn: &strVal}.Arn)
				require.Equal(t, floatVal, *guard_duty_finding.EksClusterDetails{CreatedAt: &floatVal}.CreatedAt)
				require.Equal(t, strVal, *guard_duty_finding.EksClusterDetails{Name: &strVal}.Name)
				require.Equal(t, strVal, *guard_duty_finding.EksClusterDetails{Status: &strVal}.Status)
				require.NotNil(t, genStruct.Tags) // Lazily Tested: guard_duty_finding.EksClusterDetails.Tags == []EcsClusterDetailsItem
				require.Equal(t, strVal, *guard_duty_finding.EksClusterDetails{VpcId: &strVal}.VpcId)
			})
		})

		t.Run("Evidence", func(t *testing.T) {
			genStruct := &guard_duty_finding.Evidence{
				ThreatIntelligenceDetails: []guard_duty_finding.EvidenceItem{{
					ThreatListName: strVal,
					ThreatNames:    []string{strVal},
				}},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.Evidence{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("threatIntelligenceDetails")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.ThreatIntelligenceDetails) // Lazily Tested: guard_duty_finding.Evidence.ThreatIntelligenceDetails == []EvidenceItem
			})
		})

		t.Run("EvidenceItem", func(t *testing.T) {
			genStruct := &guard_duty_finding.EvidenceItem{
				ThreatListName: strVal,
				ThreatNames:    []string{strVal},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.EvidenceItem{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"threatListName"`, strVal, "ThreatListName")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("threatNames")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, guard_duty_finding.EvidenceItem{ThreatListName: strVal}.ThreatListName)
				require.Contains(t, guard_duty_finding.EvidenceItem{ThreatNames: []string{strVal}}.ThreatNames, strVal)
			})
		})

		t.Run("GeoLocation", func(t *testing.T) {
			genStruct := &guard_duty_finding.GeoLocation{
				Lat: &floatVal,
				Lon: &floatVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.GeoLocation{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"lat"`, floatVal, "Lat")
				requireJmesMatch(t, jsearch, `"lon"`, floatVal, "Lon")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, floatVal, *guard_duty_finding.GeoLocation{Lat: &floatVal}.Lat)
				require.Equal(t, floatVal, *guard_duty_finding.GeoLocation{Lon: &floatVal}.Lon)
			})
		})

		t.Run("GeoLocation1", func(t *testing.T) {
			genStruct := &guard_duty_finding.GeoLocation1{
				Lat: floatVal,
				Lon: floatVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.GeoLocation1{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"lat"`, floatVal, "Lat")
				requireJmesMatch(t, jsearch, `"lon"`, floatVal, "Lon")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, floatVal, guard_duty_finding.GeoLocation1{Lat: floatVal}.Lat)
				require.Equal(t, floatVal, guard_duty_finding.GeoLocation1{Lon: floatVal}.Lon)
			})
		})

		t.Run("GuardDutyFinding", func(t *testing.T) {
			genStruct := &guard_duty_finding.GuardDutyFinding{
				AccountId:   strVal,
				Arn:         strVal,
				CreatedAt:   timeVal,
				Description: strVal,
				Id:          strVal,
				Partition:   strVal,
				Region:      strVal,
				Resource: &guard_duty_finding.Resource{
					AccessKeyDetails: &guard_duty_finding.AccessKeyDetails{
						AccessKeyId: &strVal,
						PrincipalId: &strVal,
						UserName:    &strVal,
						UserType:    &strVal,
					},
					ContainerDetails: &guard_duty_finding.ContainerDetails{
						Id:    &strVal,
						Image: &strVal,
						Name:  &strVal,
					},
					EbsVolumeDetails: &guard_duty_finding.EbsVolumeDetails{
						ScannedVolumeDetails: []guard_duty_finding.EbsVolumeDetailsItem{{
							DeviceName:     strVal,
							EncryptionType: strVal,
							KmsKeyArn:      anyVal,
							SnapshotArn:    strVal,
							VolumeArn:      strVal,
							VolumeSizeInGB: floatVal,
							VolumeType:     strVal,
						}},
						SkippedVolumeDetails: anyVal,
					},
					EcsClusterDetails: &guard_duty_finding.EcsClusterDetails{
						Arn:    &strVal,
						Name:   &strVal,
						Status: &strVal,
						Tags: []guard_duty_finding.EcsClusterDetailsItem{{
							Key:   strVal,
							Value: strVal,
						}},
						TaskDetails: &guard_duty_finding.TaskDetails{
							Arn: &strVal,
							Containers: []guard_duty_finding.TaskDetailsItem{{
								Image: strVal,
								Name:  strVal,
							}},
							CreatedAt:     &floatVal,
							DefinitionArn: &strVal,
							StartedAt:     &floatVal,
							StartedBy:     &strVal,
							Version:       &strVal,
						},
					},
					EksClusterDetails: &guard_duty_finding.EksClusterDetails{
						Arn:       &strVal,
						CreatedAt: &floatVal,
						Name:      &strVal,
						Status:    &strVal,
						Tags: []guard_duty_finding.EcsClusterDetailsItem{{
							Key:   strVal,
							Value: strVal,
						}},
						VpcId: &strVal,
					},
					InstanceDetails: &guard_duty_finding.InstanceDetails{
						AvailabilityZone: &strVal,
						IamInstanceProfile: &guard_duty_finding.IamInstanceProfile{
							Arn: &strVal,
							Id:  &strVal,
						},
						ImageDescription: &strVal,
						ImageId:          &strVal,
						InstanceId:       &strVal,
						InstanceState:    &strVal,
						InstanceType:     &strVal,
						LaunchTime:       &timeVal,
						NetworkInterfaces: []guard_duty_finding.InstanceDetailsItem{{
							Ipv6Addresses:      []guard_duty_finding.Ipv6AddressesItems{anyVal},
							NetworkInterfaceId: strVal,
							PrivateDnsName:     strVal,
							PrivateIpAddress:   strVal,
							PrivateIpAddresses: []guard_duty_finding.InstanceDetailsItemItem{{
								PrivateDnsName:   strVal,
								PrivateIpAddress: strVal,
							}},
							PublicDnsName: strVal,
							PublicIp:      strVal,
							SecurityGroups: []guard_duty_finding.InstanceDetailsItemItem1{{
								GroupId:   strVal,
								GroupName: strVal,
							}},
							SubnetId: strVal,
							VpcId:    strVal,
						}},
						OutpostArn: &strVal,
						Platform:   anyVal,
						ProductCodes: []guard_duty_finding.InstanceDetailsItem1{{
							ProductCodeId:   strVal,
							ProductCodeType: strVal,
						}},
						Tags: []guard_duty_finding.EcsClusterDetailsItem{{
							Key:   strVal,
							Value: strVal,
						}},
					},
					KubernetesDetails: &guard_duty_finding.KubernetesDetails{
						KubernetesUserDetails: &guard_duty_finding.KubernetesUserDetails{
							Groups:   []string{strVal},
							Uid:      &strVal,
							Username: &strVal,
						},
						KubernetesWorkloadDetails: &guard_duty_finding.KubernetesWorkloadDetails{
							Containers: []guard_duty_finding.KubernetesWorkloadDetailsItem{{
								Image:       strVal,
								ImagePrefix: strVal,
								Name:        strVal,
								SecurityContext: &guard_duty_finding.SecurityContext{
									Privileged: trueVal,
								},
							}},
							Name:      &strVal,
							Namespace: &strVal,
							Type:      &strVal,
							Uid:       &strVal,
						},
					},
					ResourceType: strVal,
					S3BucketDetails: []guard_duty_finding.ResourceItem{{
						Arn:       &strVal,
						CreatedAt: &floatVal,
						DefaultServerSideEncryption: &guard_duty_finding.DefaultServerSideEncryption{
							EncryptionType:  &strVal,
							KmsMasterKeyArn: &strVal,
						},
						Name: strVal,
						Owner: &guard_duty_finding.Owner{
							Id: &strVal,
						},
						PublicAccess: &guard_duty_finding.PublicAccess{
							EffectivePermission: &strVal,
							PermissionConfiguration: &guard_duty_finding.PermissionConfiguration{
								AccountLevelPermissions: &guard_duty_finding.AccountLevelPermissions{
									BlockPublicAccess: &guard_duty_finding.BlockPublicAccess{
										BlockPublicAcls:       &trueVal,
										BlockPublicPolicy:     &trueVal,
										IgnorePublicAcls:      &trueVal,
										RestrictPublicBuckets: &trueVal,
									},
								},
								BucketLevelPermissions: &guard_duty_finding.BucketLevelPermissions{
									AccessControlList: &guard_duty_finding.AccessControlList{
										AllowsPublicReadAccess:  &trueVal,
										AllowsPublicWriteAccess: &trueVal,
									},
									BlockPublicAccess: &guard_duty_finding.BlockPublicAccess{
										BlockPublicAcls:       &trueVal,
										BlockPublicPolicy:     &trueVal,
										IgnorePublicAcls:      &trueVal,
										RestrictPublicBuckets: &trueVal,
									},
									BucketPolicy: &guard_duty_finding.AccessControlList{
										AllowsPublicReadAccess:  &trueVal,
										AllowsPublicWriteAccess: &trueVal,
									},
								},
							},
						},
						Tags: []guard_duty_finding.EcsClusterDetailsItem{{
							Key:   strVal,
							Value: strVal,
						}},
						Type: strVal,
					}},
				},
				SchemaVersion: strVal,
				Service: &guard_duty_finding.Service{
					Action: &guard_duty_finding.Action{
						ActionType: &strVal,
						AwsApiCallAction: &guard_duty_finding.AwsApiCallAction1{
							AffectedResources: &guard_duty_finding.AffectedResources1{
								AWSCloudTrailTrail: &strVal,
								AWSEC2Instance:     &strVal,
								AWSS3Bucket:        &strVal,
							},
							Api:        &strVal,
							CallerType: &strVal,
							ErrorCode:  &strVal,
							RemoteAccountDetails: &guard_duty_finding.RemoteAccountDetails{
								AccountId:  &strVal,
								Affiliated: &trueVal,
							},
							RemoteIpDetails: &guard_duty_finding.RemoteIpDetails1{
								City: &guard_duty_finding.City1{
									CityName: &strVal,
								},
								Country: &guard_duty_finding.Country1{
									CountryName: &strVal,
								},
								GeoLocation: &guard_duty_finding.GeoLocation{
									Lat: &floatVal,
									Lon: &floatVal,
								},
								IpAddressV4: &strVal,
								Organization: &guard_duty_finding.Organization1{
									Asn:    &strVal,
									AsnOrg: &strVal,
									Isp:    &strVal,
									Org:    &strVal,
								},
							},
							ServiceName: &strVal,
						},
						DnsRequestAction: &guard_duty_finding.DnsRequestAction{
							Blocked:  &trueVal,
							Domain:   &strVal,
							Protocol: &strVal,
						},
						KubernetesApiCallAction: &guard_duty_finding.KubernetesApiCallAction{
							Parameters: &strVal,
							RemoteIpDetails: &guard_duty_finding.RemoteIpDetails2{
								City: &guard_duty_finding.City2{
									CityName: &strVal,
								},
								Country: &guard_duty_finding.Country2{
									CountryName: &strVal,
								},
								GeoLocation: &guard_duty_finding.GeoLocation{
									Lat: &floatVal,
									Lon: &floatVal,
								},
								IpAddressV4: &strVal,
								Organization: &guard_duty_finding.Organization2{
									Asn:    &strVal,
									AsnOrg: &strVal,
									Isp:    &strVal,
									Org:    &strVal,
								},
							},
							RequestUri: &strVal,
							SourceIPs:  []string{strVal},
							StatusCode: &floatVal,
							UserAgent:  &strVal,
							Verb:       &strVal,
						},
						NetworkConnectionAction: &guard_duty_finding.NetworkConnectionAction{
							Blocked:             &trueVal,
							ConnectionDirection: &strVal,
							LocalIpDetails: &guard_duty_finding.LocalIpDetails{
								IpAddressV4: &strVal,
							},
							LocalPortDetails: &guard_duty_finding.LocalPortDetails{
								Port:     &floatVal,
								PortName: &strVal,
							},
							Protocol: &strVal,
							RemoteIpDetails: &guard_duty_finding.RemoteIpDetails3{
								City: &guard_duty_finding.City3{
									CityName: &strVal,
								},
								Country: &guard_duty_finding.Country3{
									CountryName: &strVal,
								},
								GeoLocation: &guard_duty_finding.GeoLocation{
									Lat: &floatVal,
									Lon: &floatVal,
								},
								IpAddressV4: &strVal,
								Organization: &guard_duty_finding.Organization3{
									Asn:    &strVal,
									AsnOrg: &strVal,
									Isp:    &strVal,
									Org:    &strVal,
								},
							},
							RemotePortDetails: &guard_duty_finding.RemotePortDetails{
								Port:     &floatVal,
								PortName: &strVal,
							},
						},
						PortProbeAction: &guard_duty_finding.PortProbeAction{
							Blocked: &trueVal,
							PortProbeDetails: []guard_duty_finding.PortProbeActionItem{{
								LocalIpDetails: &guard_duty_finding.LocalIpDetails1{
									IpAddressV4: strVal,
								},
								LocalPortDetails: &guard_duty_finding.LocalPortDetails1{
									Port:     floatVal,
									PortName: strVal,
								},
								RemoteIpDetails: &guard_duty_finding.RemoteIpDetails4{
									City: &guard_duty_finding.City4{
										CityName: strVal,
									},
									Country: &guard_duty_finding.Country4{
										CountryName: strVal,
									},
									GeoLocation: &guard_duty_finding.GeoLocation1{
										Lat: floatVal,
										Lon: floatVal,
									},
									IpAddressV4: strVal,
									Organization: &guard_duty_finding.Organization4{
										Asn:    strVal,
										AsnOrg: strVal,
										Isp:    strVal,
										Org:    strVal,
									},
								},
							}},
						},
					},
					AdditionalInfo: &guard_duty_finding.AdditionalInfo{
						AdditionalScannedPorts: []guard_duty_finding.AdditionalScannedPortsItems{anyVal},
						Anomalies: &guard_duty_finding.Anomalies{
							AnomalousAPIs: &strVal,
						},
						ApiCalls: []guard_duty_finding.AdditionalInfoItem{{
							Count:     floatVal,
							FirstSeen: floatVal,
							LastSeen:  floatVal,
							Name:      strVal,
						}},
						Domain:    &strVal,
						InBytes:   &strVal,
						LocalPort: &strVal,
						NewPolicy: &guard_duty_finding.NewPolicy{
							AllowUsersToChangePassword: &strVal,
							HardExpiry:                 &strVal,
							MaxPasswordAge:             &strVal,
							MinimumPasswordLength:      &strVal,
							PasswordReusePrevention:    &strVal,
							RequireLowercaseCharacters: &strVal,
							RequireNumbers:             &strVal,
							RequireSymbols:             &strVal,
							RequireUppercaseCharacters: &strVal,
						},
						OldPolicy: &guard_duty_finding.OldPolicy{
							AllowUsersToChangePassword: &strVal,
							HardExpiry:                 &strVal,
							MaxPasswordAge:             &strVal,
							MinimumPasswordLength:      &strVal,
							PasswordReusePrevention:    &strVal,
							RequireLowercaseCharacters: &strVal,
							RequireNumbers:             &strVal,
							RequireSymbols:             &strVal,
							RequireUppercaseCharacters: &strVal,
						},
						OutBytes:           &strVal,
						PortsScannedSample: []float64{floatVal},
						ProfiledBehavior: &guard_duty_finding.ProfiledBehavior{
							FrequentProfiledAPIsAccountProfiling:                      &strVal,
							FrequentProfiledAPIsUserIdentityProfiling:                 &strVal,
							FrequentProfiledASNsAccountProfiling:                      &strVal,
							FrequentProfiledASNsBucketProfiling:                       &strVal,
							FrequentProfiledASNsUserIdentityProfiling:                 &strVal,
							FrequentProfiledBucketsAccountProfiling:                   &strVal,
							FrequentProfiledBucketsUserIdentityProfiling:              &strVal,
							FrequentProfiledUserAgentsAccountProfiling:                &strVal,
							FrequentProfiledUserAgentsUserIdentityProfiling:           &strVal,
							FrequentProfiledUserNamesAccountProfiling:                 &strVal,
							FrequentProfiledUserNamesBucketProfiling:                  &strVal,
							FrequentProfiledUserTypesAccountProfiling:                 &strVal,
							InfrequentProfiledAPIsAccountProfiling:                    &strVal,
							InfrequentProfiledAPIsUserIdentityProfiling:               &strVal,
							InfrequentProfiledASNsAccountProfiling:                    &strVal,
							InfrequentProfiledASNsBucketProfiling:                     &strVal,
							InfrequentProfiledASNsUserIdentityProfiling:               &strVal,
							InfrequentProfiledBucketsAccountProfiling:                 &strVal,
							InfrequentProfiledBucketsUserIdentityProfiling:            &strVal,
							InfrequentProfiledUserAgentsAccountProfiling:              &strVal,
							InfrequentProfiledUserAgentsUserIdentityProfiling:         &strVal,
							InfrequentProfiledUserNamesAccountProfiling:               &strVal,
							InfrequentProfiledUserNamesBucketProfiling:                &strVal,
							InfrequentProfiledUserTypesAccountProfiling:               &strVal,
							NumberOfHistoricalDailyAvgAPIsBucketProfiling:             &strVal,
							NumberOfHistoricalDailyAvgAPIsBucketUserIdentityProfiling: &strVal,
							NumberOfHistoricalDailyAvgAPIsUserIdentityProfiling:       &strVal,
							NumberOfHistoricalDailyMaxAPIsBucketProfiling:             &strVal,
							NumberOfHistoricalDailyMaxAPIsBucketUserIdentityProfiling: &strVal,
							NumberOfHistoricalDailyMaxAPIsUserIdentityProfiling:       &strVal,
							RareProfiledAPIsAccountProfiling:                          &strVal,
							RareProfiledAPIsUserIdentityProfiling:                     &strVal,
							RareProfiledASNsAccountProfiling:                          &strVal,
							RareProfiledASNsBucketProfiling:                           &strVal,
							RareProfiledASNsUserIdentityProfiling:                     &strVal,
							RareProfiledBucketsAccountProfiling:                       &strVal,
							RareProfiledBucketsUserIdentityProfiling:                  &strVal,
							RareProfiledUserAgentsAccountProfiling:                    &strVal,
							RareProfiledUserAgentsUserIdentityProfiling:               &strVal,
							RareProfiledUserNamesAccountProfiling:                     &strVal,
							RareProfiledUserNamesBucketProfiling:                      &strVal,
							RareProfiledUserTypesAccountProfiling:                     &strVal,
						},
						RecentCredentials: []guard_duty_finding.AdditionalInfoItem1{{
							AccessKeyId: strVal,
							IpAddressV4: strVal,
							PrincipalId: strVal,
						}},
						Sample:         trueVal,
						ScannedPort:    &floatVal,
						ThreatListName: &strVal,
						ThreatName:     &strVal,
						Type:           strVal,
						Unusual:        anyVal,
						UnusualBehavior: &guard_duty_finding.UnusualBehavior{
							IsUnusualUserIdentity:                              &strVal,
							NumberOfPast24HoursAPIsBucketProfiling:             &strVal,
							NumberOfPast24HoursAPIsBucketUserIdentityProfiling: &strVal,
							NumberOfPast24HoursAPIsUserIdentityProfiling:       &strVal,
							UnusualAPIsAccountProfiling:                        &strVal,
							UnusualAPIsUserIdentityProfiling:                   &strVal,
							UnusualASNsAccountProfiling:                        &strVal,
							UnusualASNsBucketProfiling:                         &strVal,
							UnusualASNsUserIdentityProfiling:                   &strVal,
							UnusualBucketsAccountProfiling:                     &strVal,
							UnusualBucketsUserIdentityProfiling:                &strVal,
							UnusualUserAgentsAccountProfiling:                  &strVal,
							UnusualUserAgentsUserIdentityProfiling:             &strVal,
							UnusualUserNamesAccountProfiling:                   &strVal,
							UnusualUserNamesBucketProfiling:                    &strVal,
							UnusualUserTypesAccountProfiling:                   &strVal,
						},
						UnusualProtocol: &strVal,
						UserAgent: &guard_duty_finding.UserAgent{
							FullUserAgent:     &strVal,
							UserAgentCategory: &strVal,
						},
						Value: strVal,
					},
					Archived: trueVal,
					AwsApiCallAction: &guard_duty_finding.AwsApiCallAction{
						AffectedResources: anyVal,
						Api:               &strVal,
						CallerType:        &strVal,
						ErrorCode:         &strVal,
						RemoteIpDetails: &guard_duty_finding.RemoteIpDetails{
							City: &guard_duty_finding.City{
								CityName: &strVal,
							},
							Country: &guard_duty_finding.Country{
								CountryName: &strVal,
							},
							GeoLocation: &guard_duty_finding.GeoLocation{
								Lat: &floatVal,
								Lon: &floatVal,
							},
							IpAddressV4: &strVal,
							Organization: &guard_duty_finding.Organization{
								Asn:    &strVal,
								AsnOrg: &strVal,
								Isp:    &strVal,
								Org:    &strVal,
							},
						},
						ServiceName: &strVal,
					},
					Count:      floatVal,
					DetectorId: strVal,
					EbsVolumeScanDetails: &guard_duty_finding.EbsVolumeScanDetails{
						ScanCompletedAt: &floatVal,
						ScanDetections: &guard_duty_finding.ScanDetections{
							HighestSeverityThreatDetails: &guard_duty_finding.HighestSeverityThreatDetails{
								Count:      &floatVal,
								Severity:   &strVal,
								ThreatName: &strVal,
							},
							ScannedItemCount: &guard_duty_finding.ScannedItemCount{
								Files:   &floatVal,
								TotalGb: &floatVal,
								Volumes: &floatVal,
							},
							ThreatDetectedByName: &guard_duty_finding.ThreatDetectedByName{
								ItemCount: &floatVal,
								Shortened: &trueVal,
								ThreatNames: []guard_duty_finding.ThreatDetectedByNameItem{{
									FilePaths: []guard_duty_finding.ThreatDetectedByNameItemItem{{
										FileName:  strVal,
										FilePath:  strVal,
										Hash:      strVal,
										VolumeArn: strVal,
									}},
									ItemCount: floatVal,
									Name:      strVal,
									Severity:  strVal,
								}},
								UniqueThreatNameCount: &floatVal,
							},
							ThreatsDetectedItemCount: &guard_duty_finding.ThreatsDetectedItemCount{
								Files: &floatVal,
							},
						},
						ScanId:           &strVal,
						ScanStartedAt:    &floatVal,
						Sources:          []string{strVal},
						TriggerFindingId: &strVal,
					},
					EventFirstSeen: timeVal,
					EventLastSeen:  timeVal,
					Evidence: &guard_duty_finding.Evidence{
						ThreatIntelligenceDetails: []guard_duty_finding.EvidenceItem{{
							ThreatListName: strVal,
							ThreatNames:    []string{strVal},
						}},
					},
					FeatureName:  &strVal,
					ResourceRole: &strVal,
					ServiceName:  strVal,
				},
				Severity:  floatVal,
				Title:     strVal,
				Type:      strVal,
				UpdatedAt: timeVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.GuardDutyFinding{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"accountId"`, strVal, "AccountId")
				requireJmesMatch(t, jsearch, `"arn"`, strVal, "Arn")
				requireJmesMatch(t, jsearch, `"createdAt"`, string(mustRet(timeVal.MarshalText())), "CreatedAt")
				requireJmesMatch(t, jsearch, `"description"`, strVal, "Description")
				requireJmesMatch(t, jsearch, `"id"`, strVal, "Id")
				requireJmesMatch(t, jsearch, `"partition"`, strVal, "Partition")
				requireJmesMatch(t, jsearch, `"region"`, strVal, "Region")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("resource")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"schemaVersion"`, strVal, "SchemaVersion")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("service")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"severity"`, floatVal, "Severity")
				requireJmesMatch(t, jsearch, `"title"`, strVal, "Title")
				requireJmesMatch(t, jsearch, `"type"`, strVal, "Type")
				requireJmesMatch(t, jsearch, `"updatedAt"`, string(mustRet(timeVal.MarshalText())), "UpdatedAt")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, guard_duty_finding.GuardDutyFinding{AccountId: strVal}.AccountId)
				require.Equal(t, strVal, guard_duty_finding.GuardDutyFinding{Arn: strVal}.Arn)
				require.Equal(t, timeVal, guard_duty_finding.GuardDutyFinding{CreatedAt: timeVal}.CreatedAt)
				require.Equal(t, strVal, guard_duty_finding.GuardDutyFinding{Description: strVal}.Description)
				require.Equal(t, strVal, guard_duty_finding.GuardDutyFinding{Id: strVal}.Id)
				require.Equal(t, strVal, guard_duty_finding.GuardDutyFinding{Partition: strVal}.Partition)
				require.Equal(t, strVal, guard_duty_finding.GuardDutyFinding{Region: strVal}.Region)
				require.NotNil(t, genStruct.Resource) // Lazily Tested: guard_duty_finding.GuardDutyFinding.Resource == *Resource
				require.Equal(t, strVal, guard_duty_finding.GuardDutyFinding{SchemaVersion: strVal}.SchemaVersion)
				require.NotNil(t, genStruct.Service) // Lazily Tested: guard_duty_finding.GuardDutyFinding.Service == *Service
				require.Equal(t, floatVal, guard_duty_finding.GuardDutyFinding{Severity: floatVal}.Severity)
				require.Equal(t, strVal, guard_duty_finding.GuardDutyFinding{Title: strVal}.Title)
				require.Equal(t, strVal, guard_duty_finding.GuardDutyFinding{Type: strVal}.Type)
				require.Equal(t, timeVal, guard_duty_finding.GuardDutyFinding{UpdatedAt: timeVal}.UpdatedAt)
			})
		})

		t.Run("HighestSeverityThreatDetails", func(t *testing.T) {
			genStruct := &guard_duty_finding.HighestSeverityThreatDetails{
				Count:      &floatVal,
				Severity:   &strVal,
				ThreatName: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.HighestSeverityThreatDetails{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"count"`, floatVal, "Count")
				requireJmesMatch(t, jsearch, `"severity"`, strVal, "Severity")
				requireJmesMatch(t, jsearch, `"threatName"`, strVal, "ThreatName")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, floatVal, *guard_duty_finding.HighestSeverityThreatDetails{Count: &floatVal}.Count)
				require.Equal(t, strVal, *guard_duty_finding.HighestSeverityThreatDetails{Severity: &strVal}.Severity)
				require.Equal(t, strVal, *guard_duty_finding.HighestSeverityThreatDetails{ThreatName: &strVal}.ThreatName)
			})
		})

		t.Run("IamInstanceProfile", func(t *testing.T) {
			genStruct := &guard_duty_finding.IamInstanceProfile{
				Arn: &strVal,
				Id:  &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.IamInstanceProfile{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"arn"`, strVal, "Arn")
				requireJmesMatch(t, jsearch, `"id"`, strVal, "Id")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.IamInstanceProfile{Arn: &strVal}.Arn)
				require.Equal(t, strVal, *guard_duty_finding.IamInstanceProfile{Id: &strVal}.Id)
			})
		})

		t.Run("InstanceDetails", func(t *testing.T) {
			genStruct := &guard_duty_finding.InstanceDetails{
				AvailabilityZone: &strVal,
				IamInstanceProfile: &guard_duty_finding.IamInstanceProfile{
					Arn: &strVal,
					Id:  &strVal,
				},
				ImageDescription: &strVal,
				ImageId:          &strVal,
				InstanceId:       &strVal,
				InstanceState:    &strVal,
				InstanceType:     &strVal,
				LaunchTime:       &timeVal,
				NetworkInterfaces: []guard_duty_finding.InstanceDetailsItem{{
					Ipv6Addresses:      []guard_duty_finding.Ipv6AddressesItems{anyVal},
					NetworkInterfaceId: strVal,
					PrivateDnsName:     strVal,
					PrivateIpAddress:   strVal,
					PrivateIpAddresses: []guard_duty_finding.InstanceDetailsItemItem{{
						PrivateDnsName:   strVal,
						PrivateIpAddress: strVal,
					}},
					PublicDnsName: strVal,
					PublicIp:      strVal,
					SecurityGroups: []guard_duty_finding.InstanceDetailsItemItem1{{
						GroupId:   strVal,
						GroupName: strVal,
					}},
					SubnetId: strVal,
					VpcId:    strVal,
				}},
				OutpostArn: &strVal,
				Platform:   anyVal,
				ProductCodes: []guard_duty_finding.InstanceDetailsItem1{{
					ProductCodeId:   strVal,
					ProductCodeType: strVal,
				}},
				Tags: []guard_duty_finding.EcsClusterDetailsItem{{
					Key:   strVal,
					Value: strVal,
				}},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.InstanceDetails{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"availabilityZone"`, strVal, "AvailabilityZone")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("iamInstanceProfile")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"imageDescription"`, strVal, "ImageDescription")
				requireJmesMatch(t, jsearch, `"imageId"`, strVal, "ImageId")
				requireJmesMatch(t, jsearch, `"instanceId"`, strVal, "InstanceId")
				requireJmesMatch(t, jsearch, `"instanceState"`, strVal, "InstanceState")
				requireJmesMatch(t, jsearch, `"instanceType"`, strVal, "InstanceType")
				requireJmesMatch(t, jsearch, `"launchTime"`, string(mustRet(timeVal.MarshalText())), "LaunchTime")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("networkInterfaces")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"outpostArn"`, strVal, "OutpostArn")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("platform")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("productCodes")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("tags")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.InstanceDetails{AvailabilityZone: &strVal}.AvailabilityZone)
				require.NotNil(t, genStruct.IamInstanceProfile) // Lazily Tested: guard_duty_finding.InstanceDetails.IamInstanceProfile == *IamInstanceProfile
				require.Equal(t, strVal, *guard_duty_finding.InstanceDetails{ImageDescription: &strVal}.ImageDescription)
				require.Equal(t, strVal, *guard_duty_finding.InstanceDetails{ImageId: &strVal}.ImageId)
				require.Equal(t, strVal, *guard_duty_finding.InstanceDetails{InstanceId: &strVal}.InstanceId)
				require.Equal(t, strVal, *guard_duty_finding.InstanceDetails{InstanceState: &strVal}.InstanceState)
				require.Equal(t, strVal, *guard_duty_finding.InstanceDetails{InstanceType: &strVal}.InstanceType)
				require.Equal(t, timeVal, *guard_duty_finding.InstanceDetails{LaunchTime: &timeVal}.LaunchTime)
				require.NotNil(t, genStruct.NetworkInterfaces) // Lazily Tested: guard_duty_finding.InstanceDetails.NetworkInterfaces == []InstanceDetailsItem
				require.Equal(t, strVal, *guard_duty_finding.InstanceDetails{OutpostArn: &strVal}.OutpostArn)
				require.NotNil(t, genStruct.Platform)     // Lazily Tested: guard_duty_finding.InstanceDetails.Platform == Platform
				require.NotNil(t, genStruct.ProductCodes) // Lazily Tested: guard_duty_finding.InstanceDetails.ProductCodes == []InstanceDetailsItem1
				require.NotNil(t, genStruct.Tags)         // Lazily Tested: guard_duty_finding.InstanceDetails.Tags == []EcsClusterDetailsItem
			})
		})

		t.Run("InstanceDetailsItem", func(t *testing.T) {
			genStruct := &guard_duty_finding.InstanceDetailsItem{
				Ipv6Addresses:      []guard_duty_finding.Ipv6AddressesItems{anyVal},
				NetworkInterfaceId: strVal,
				PrivateDnsName:     strVal,
				PrivateIpAddress:   strVal,
				PrivateIpAddresses: []guard_duty_finding.InstanceDetailsItemItem{{
					PrivateDnsName:   strVal,
					PrivateIpAddress: strVal,
				}},
				PublicDnsName: strVal,
				PublicIp:      strVal,
				SecurityGroups: []guard_duty_finding.InstanceDetailsItemItem1{{
					GroupId:   strVal,
					GroupName: strVal,
				}},
				SubnetId: strVal,
				VpcId:    strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.InstanceDetailsItem{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("ipv6Addresses")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"networkInterfaceId"`, strVal, "NetworkInterfaceId")
				requireJmesMatch(t, jsearch, `"privateDnsName"`, strVal, "PrivateDnsName")
				requireJmesMatch(t, jsearch, `"privateIpAddress"`, strVal, "PrivateIpAddress")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("privateIpAddresses")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"publicDnsName"`, strVal, "PublicDnsName")
				requireJmesMatch(t, jsearch, `"publicIp"`, strVal, "PublicIp")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("securityGroups")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"subnetId"`, strVal, "SubnetId")
				requireJmesMatch(t, jsearch, `"vpcId"`, strVal, "VpcId")

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.Ipv6Addresses) // Lazily Tested: guard_duty_finding.InstanceDetailsItem.Ipv6Addresses == []Ipv6AddressesItems
				require.Equal(t, strVal, guard_duty_finding.InstanceDetailsItem{NetworkInterfaceId: strVal}.NetworkInterfaceId)
				require.Equal(t, strVal, guard_duty_finding.InstanceDetailsItem{PrivateDnsName: strVal}.PrivateDnsName)
				require.Equal(t, strVal, guard_duty_finding.InstanceDetailsItem{PrivateIpAddress: strVal}.PrivateIpAddress)
				require.NotNil(t, genStruct.PrivateIpAddresses) // Lazily Tested: guard_duty_finding.InstanceDetailsItem.PrivateIpAddresses == []InstanceDetailsItemItem
				require.Equal(t, strVal, guard_duty_finding.InstanceDetailsItem{PublicDnsName: strVal}.PublicDnsName)
				require.Equal(t, strVal, guard_duty_finding.InstanceDetailsItem{PublicIp: strVal}.PublicIp)
				require.NotNil(t, genStruct.SecurityGroups) // Lazily Tested: guard_duty_finding.InstanceDetailsItem.SecurityGroups == []InstanceDetailsItemItem1
				require.Equal(t, strVal, guard_duty_finding.InstanceDetailsItem{SubnetId: strVal}.SubnetId)
				require.Equal(t, strVal, guard_duty_finding.InstanceDetailsItem{VpcId: strVal}.VpcId)
			})
		})

		t.Run("InstanceDetailsItem1", func(t *testing.T) {
			genStruct := &guard_duty_finding.InstanceDetailsItem1{
				ProductCodeId:   strVal,
				ProductCodeType: strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.InstanceDetailsItem1{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"productCodeId"`, strVal, "ProductCodeId")
				requireJmesMatch(t, jsearch, `"productCodeType"`, strVal, "ProductCodeType")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, guard_duty_finding.InstanceDetailsItem1{ProductCodeId: strVal}.ProductCodeId)
				require.Equal(t, strVal, guard_duty_finding.InstanceDetailsItem1{ProductCodeType: strVal}.ProductCodeType)
			})
		})

		t.Run("InstanceDetailsItemItem", func(t *testing.T) {
			genStruct := &guard_duty_finding.InstanceDetailsItemItem{
				PrivateDnsName:   strVal,
				PrivateIpAddress: strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.InstanceDetailsItemItem{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"privateDnsName"`, strVal, "PrivateDnsName")
				requireJmesMatch(t, jsearch, `"privateIpAddress"`, strVal, "PrivateIpAddress")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, guard_duty_finding.InstanceDetailsItemItem{PrivateDnsName: strVal}.PrivateDnsName)
				require.Equal(t, strVal, guard_duty_finding.InstanceDetailsItemItem{PrivateIpAddress: strVal}.PrivateIpAddress)
			})
		})

		t.Run("InstanceDetailsItemItem1", func(t *testing.T) {
			genStruct := &guard_duty_finding.InstanceDetailsItemItem1{
				GroupId:   strVal,
				GroupName: strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.InstanceDetailsItemItem1{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"groupId"`, strVal, "GroupId")
				requireJmesMatch(t, jsearch, `"groupName"`, strVal, "GroupName")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, guard_duty_finding.InstanceDetailsItemItem1{GroupId: strVal}.GroupId)
				require.Equal(t, strVal, guard_duty_finding.InstanceDetailsItemItem1{GroupName: strVal}.GroupName)
			})
		})

		t.Run("KubernetesApiCallAction", func(t *testing.T) {
			genStruct := &guard_duty_finding.KubernetesApiCallAction{
				Parameters: &strVal,
				RemoteIpDetails: &guard_duty_finding.RemoteIpDetails2{
					City: &guard_duty_finding.City2{
						CityName: &strVal,
					},
					Country: &guard_duty_finding.Country2{
						CountryName: &strVal,
					},
					GeoLocation: &guard_duty_finding.GeoLocation{
						Lat: &floatVal,
						Lon: &floatVal,
					},
					IpAddressV4: &strVal,
					Organization: &guard_duty_finding.Organization2{
						Asn:    &strVal,
						AsnOrg: &strVal,
						Isp:    &strVal,
						Org:    &strVal,
					},
				},
				RequestUri: &strVal,
				SourceIPs:  []string{strVal},
				StatusCode: &floatVal,
				UserAgent:  &strVal,
				Verb:       &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.KubernetesApiCallAction{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"parameters"`, strVal, "Parameters")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("remoteIpDetails")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"requestUri"`, strVal, "RequestUri")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("sourceIPs")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"statusCode"`, floatVal, "StatusCode")
				requireJmesMatch(t, jsearch, `"userAgent"`, strVal, "UserAgent")
				requireJmesMatch(t, jsearch, `"verb"`, strVal, "Verb")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.KubernetesApiCallAction{Parameters: &strVal}.Parameters)
				require.NotNil(t, genStruct.RemoteIpDetails) // Lazily Tested: guard_duty_finding.KubernetesApiCallAction.RemoteIpDetails == *RemoteIpDetails2
				require.Equal(t, strVal, *guard_duty_finding.KubernetesApiCallAction{RequestUri: &strVal}.RequestUri)
				require.Contains(t, guard_duty_finding.KubernetesApiCallAction{SourceIPs: []string{strVal}}.SourceIPs, strVal)
				require.Equal(t, floatVal, *guard_duty_finding.KubernetesApiCallAction{StatusCode: &floatVal}.StatusCode)
				require.Equal(t, strVal, *guard_duty_finding.KubernetesApiCallAction{UserAgent: &strVal}.UserAgent)
				require.Equal(t, strVal, *guard_duty_finding.KubernetesApiCallAction{Verb: &strVal}.Verb)
			})
		})

		t.Run("KubernetesDetails", func(t *testing.T) {
			genStruct := &guard_duty_finding.KubernetesDetails{
				KubernetesUserDetails: &guard_duty_finding.KubernetesUserDetails{
					Groups:   []string{strVal},
					Uid:      &strVal,
					Username: &strVal,
				},
				KubernetesWorkloadDetails: &guard_duty_finding.KubernetesWorkloadDetails{
					Containers: []guard_duty_finding.KubernetesWorkloadDetailsItem{{
						Image:       strVal,
						ImagePrefix: strVal,
						Name:        strVal,
						SecurityContext: &guard_duty_finding.SecurityContext{
							Privileged: trueVal,
						},
					}},
					Name:      &strVal,
					Namespace: &strVal,
					Type:      &strVal,
					Uid:       &strVal,
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.KubernetesDetails{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("kubernetesUserDetails")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("kubernetesWorkloadDetails")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.KubernetesUserDetails)     // Lazily Tested: guard_duty_finding.KubernetesDetails.KubernetesUserDetails == *KubernetesUserDetails
				require.NotNil(t, genStruct.KubernetesWorkloadDetails) // Lazily Tested: guard_duty_finding.KubernetesDetails.KubernetesWorkloadDetails == *KubernetesWorkloadDetails
			})
		})

		t.Run("KubernetesUserDetails", func(t *testing.T) {
			genStruct := &guard_duty_finding.KubernetesUserDetails{
				Groups:   []string{strVal},
				Uid:      &strVal,
				Username: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.KubernetesUserDetails{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("groups")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"uid"`, strVal, "Uid")
				requireJmesMatch(t, jsearch, `"username"`, strVal, "Username")

			})
			t.Run("fields", func(t *testing.T) {
				require.Contains(t, guard_duty_finding.KubernetesUserDetails{Groups: []string{strVal}}.Groups, strVal)
				require.Equal(t, strVal, *guard_duty_finding.KubernetesUserDetails{Uid: &strVal}.Uid)
				require.Equal(t, strVal, *guard_duty_finding.KubernetesUserDetails{Username: &strVal}.Username)
			})
		})

		t.Run("KubernetesWorkloadDetails", func(t *testing.T) {
			genStruct := &guard_duty_finding.KubernetesWorkloadDetails{
				Containers: []guard_duty_finding.KubernetesWorkloadDetailsItem{{
					Image:       strVal,
					ImagePrefix: strVal,
					Name:        strVal,
					SecurityContext: &guard_duty_finding.SecurityContext{
						Privileged: trueVal,
					},
				}},
				Name:      &strVal,
				Namespace: &strVal,
				Type:      &strVal,
				Uid:       &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.KubernetesWorkloadDetails{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("containers")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"name"`, strVal, "Name")
				requireJmesMatch(t, jsearch, `"namespace"`, strVal, "Namespace")
				requireJmesMatch(t, jsearch, `"type"`, strVal, "Type")
				requireJmesMatch(t, jsearch, `"uid"`, strVal, "Uid")

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.Containers) // Lazily Tested: guard_duty_finding.KubernetesWorkloadDetails.Containers == []KubernetesWorkloadDetailsItem
				require.Equal(t, strVal, *guard_duty_finding.KubernetesWorkloadDetails{Name: &strVal}.Name)
				require.Equal(t, strVal, *guard_duty_finding.KubernetesWorkloadDetails{Namespace: &strVal}.Namespace)
				require.Equal(t, strVal, *guard_duty_finding.KubernetesWorkloadDetails{Type: &strVal}.Type)
				require.Equal(t, strVal, *guard_duty_finding.KubernetesWorkloadDetails{Uid: &strVal}.Uid)
			})
		})

		t.Run("KubernetesWorkloadDetailsItem", func(t *testing.T) {
			genStruct := &guard_duty_finding.KubernetesWorkloadDetailsItem{
				Image:       strVal,
				ImagePrefix: strVal,
				Name:        strVal,
				SecurityContext: &guard_duty_finding.SecurityContext{
					Privileged: trueVal,
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.KubernetesWorkloadDetailsItem{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"image"`, strVal, "Image")
				requireJmesMatch(t, jsearch, `"imagePrefix"`, strVal, "ImagePrefix")
				requireJmesMatch(t, jsearch, `"name"`, strVal, "Name")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("securityContext")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, guard_duty_finding.KubernetesWorkloadDetailsItem{Image: strVal}.Image)
				require.Equal(t, strVal, guard_duty_finding.KubernetesWorkloadDetailsItem{ImagePrefix: strVal}.ImagePrefix)
				require.Equal(t, strVal, guard_duty_finding.KubernetesWorkloadDetailsItem{Name: strVal}.Name)
				require.NotNil(t, genStruct.SecurityContext) // Lazily Tested: guard_duty_finding.KubernetesWorkloadDetailsItem.SecurityContext == *SecurityContext
			})
		})

		t.Run("LocalIpDetails", func(t *testing.T) {
			genStruct := &guard_duty_finding.LocalIpDetails{
				IpAddressV4: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.LocalIpDetails{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"ipAddressV4"`, strVal, "IpAddressV4")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.LocalIpDetails{IpAddressV4: &strVal}.IpAddressV4)
			})
		})

		t.Run("LocalIpDetails1", func(t *testing.T) {
			genStruct := &guard_duty_finding.LocalIpDetails1{
				IpAddressV4: strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.LocalIpDetails1{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"ipAddressV4"`, strVal, "IpAddressV4")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, guard_duty_finding.LocalIpDetails1{IpAddressV4: strVal}.IpAddressV4)
			})
		})

		t.Run("LocalPortDetails", func(t *testing.T) {
			genStruct := &guard_duty_finding.LocalPortDetails{
				Port:     &floatVal,
				PortName: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.LocalPortDetails{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"port"`, floatVal, "Port")
				requireJmesMatch(t, jsearch, `"portName"`, strVal, "PortName")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, floatVal, *guard_duty_finding.LocalPortDetails{Port: &floatVal}.Port)
				require.Equal(t, strVal, *guard_duty_finding.LocalPortDetails{PortName: &strVal}.PortName)
			})
		})

		t.Run("LocalPortDetails1", func(t *testing.T) {
			genStruct := &guard_duty_finding.LocalPortDetails1{
				Port:     floatVal,
				PortName: strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.LocalPortDetails1{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"port"`, floatVal, "Port")
				requireJmesMatch(t, jsearch, `"portName"`, strVal, "PortName")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, floatVal, guard_duty_finding.LocalPortDetails1{Port: floatVal}.Port)
				require.Equal(t, strVal, guard_duty_finding.LocalPortDetails1{PortName: strVal}.PortName)
			})
		})

		t.Run("NetworkConnectionAction", func(t *testing.T) {
			genStruct := &guard_duty_finding.NetworkConnectionAction{
				Blocked:             &trueVal,
				ConnectionDirection: &strVal,
				LocalIpDetails: &guard_duty_finding.LocalIpDetails{
					IpAddressV4: &strVal,
				},
				LocalPortDetails: &guard_duty_finding.LocalPortDetails{
					Port:     &floatVal,
					PortName: &strVal,
				},
				Protocol: &strVal,
				RemoteIpDetails: &guard_duty_finding.RemoteIpDetails3{
					City: &guard_duty_finding.City3{
						CityName: &strVal,
					},
					Country: &guard_duty_finding.Country3{
						CountryName: &strVal,
					},
					GeoLocation: &guard_duty_finding.GeoLocation{
						Lat: &floatVal,
						Lon: &floatVal,
					},
					IpAddressV4: &strVal,
					Organization: &guard_duty_finding.Organization3{
						Asn:    &strVal,
						AsnOrg: &strVal,
						Isp:    &strVal,
						Org:    &strVal,
					},
				},
				RemotePortDetails: &guard_duty_finding.RemotePortDetails{
					Port:     &floatVal,
					PortName: &strVal,
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.NetworkConnectionAction{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"blocked"`, trueVal, "Blocked")
				requireJmesMatch(t, jsearch, `"connectionDirection"`, strVal, "ConnectionDirection")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("localIpDetails")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("localPortDetails")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"protocol"`, strVal, "Protocol")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("remoteIpDetails")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("remotePortDetails")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.Blocked) // Lazily Tested: guard_duty_finding.NetworkConnectionAction.Blocked == *bool
				require.Equal(t, strVal, *guard_duty_finding.NetworkConnectionAction{ConnectionDirection: &strVal}.ConnectionDirection)
				require.NotNil(t, genStruct.LocalIpDetails)   // Lazily Tested: guard_duty_finding.NetworkConnectionAction.LocalIpDetails == *LocalIpDetails
				require.NotNil(t, genStruct.LocalPortDetails) // Lazily Tested: guard_duty_finding.NetworkConnectionAction.LocalPortDetails == *LocalPortDetails
				require.Equal(t, strVal, *guard_duty_finding.NetworkConnectionAction{Protocol: &strVal}.Protocol)
				require.NotNil(t, genStruct.RemoteIpDetails)   // Lazily Tested: guard_duty_finding.NetworkConnectionAction.RemoteIpDetails == *RemoteIpDetails3
				require.NotNil(t, genStruct.RemotePortDetails) // Lazily Tested: guard_duty_finding.NetworkConnectionAction.RemotePortDetails == *RemotePortDetails
			})
		})

		t.Run("NewPolicy", func(t *testing.T) {
			genStruct := &guard_duty_finding.NewPolicy{
				AllowUsersToChangePassword: &strVal,
				HardExpiry:                 &strVal,
				MaxPasswordAge:             &strVal,
				MinimumPasswordLength:      &strVal,
				PasswordReusePrevention:    &strVal,
				RequireLowercaseCharacters: &strVal,
				RequireNumbers:             &strVal,
				RequireSymbols:             &strVal,
				RequireUppercaseCharacters: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.NewPolicy{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"allowUsersToChangePassword"`, strVal, "AllowUsersToChangePassword")
				requireJmesMatch(t, jsearch, `"hardExpiry"`, strVal, "HardExpiry")
				requireJmesMatch(t, jsearch, `"maxPasswordAge"`, strVal, "MaxPasswordAge")
				requireJmesMatch(t, jsearch, `"minimumPasswordLength"`, strVal, "MinimumPasswordLength")
				requireJmesMatch(t, jsearch, `"passwordReusePrevention"`, strVal, "PasswordReusePrevention")
				requireJmesMatch(t, jsearch, `"requireLowercaseCharacters"`, strVal, "RequireLowercaseCharacters")
				requireJmesMatch(t, jsearch, `"requireNumbers"`, strVal, "RequireNumbers")
				requireJmesMatch(t, jsearch, `"requireSymbols"`, strVal, "RequireSymbols")
				requireJmesMatch(t, jsearch, `"requireUppercaseCharacters"`, strVal, "RequireUppercaseCharacters")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.NewPolicy{AllowUsersToChangePassword: &strVal}.AllowUsersToChangePassword)
				require.Equal(t, strVal, *guard_duty_finding.NewPolicy{HardExpiry: &strVal}.HardExpiry)
				require.Equal(t, strVal, *guard_duty_finding.NewPolicy{MaxPasswordAge: &strVal}.MaxPasswordAge)
				require.Equal(t, strVal, *guard_duty_finding.NewPolicy{MinimumPasswordLength: &strVal}.MinimumPasswordLength)
				require.Equal(t, strVal, *guard_duty_finding.NewPolicy{PasswordReusePrevention: &strVal}.PasswordReusePrevention)
				require.Equal(t, strVal, *guard_duty_finding.NewPolicy{RequireLowercaseCharacters: &strVal}.RequireLowercaseCharacters)
				require.Equal(t, strVal, *guard_duty_finding.NewPolicy{RequireNumbers: &strVal}.RequireNumbers)
				require.Equal(t, strVal, *guard_duty_finding.NewPolicy{RequireSymbols: &strVal}.RequireSymbols)
				require.Equal(t, strVal, *guard_duty_finding.NewPolicy{RequireUppercaseCharacters: &strVal}.RequireUppercaseCharacters)
			})
		})

		t.Run("OldPolicy", func(t *testing.T) {
			genStruct := &guard_duty_finding.OldPolicy{
				AllowUsersToChangePassword: &strVal,
				HardExpiry:                 &strVal,
				MaxPasswordAge:             &strVal,
				MinimumPasswordLength:      &strVal,
				PasswordReusePrevention:    &strVal,
				RequireLowercaseCharacters: &strVal,
				RequireNumbers:             &strVal,
				RequireSymbols:             &strVal,
				RequireUppercaseCharacters: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.OldPolicy{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"allowUsersToChangePassword"`, strVal, "AllowUsersToChangePassword")
				requireJmesMatch(t, jsearch, `"hardExpiry"`, strVal, "HardExpiry")
				requireJmesMatch(t, jsearch, `"maxPasswordAge"`, strVal, "MaxPasswordAge")
				requireJmesMatch(t, jsearch, `"minimumPasswordLength"`, strVal, "MinimumPasswordLength")
				requireJmesMatch(t, jsearch, `"passwordReusePrevention"`, strVal, "PasswordReusePrevention")
				requireJmesMatch(t, jsearch, `"requireLowercaseCharacters"`, strVal, "RequireLowercaseCharacters")
				requireJmesMatch(t, jsearch, `"requireNumbers"`, strVal, "RequireNumbers")
				requireJmesMatch(t, jsearch, `"requireSymbols"`, strVal, "RequireSymbols")
				requireJmesMatch(t, jsearch, `"requireUppercaseCharacters"`, strVal, "RequireUppercaseCharacters")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.OldPolicy{AllowUsersToChangePassword: &strVal}.AllowUsersToChangePassword)
				require.Equal(t, strVal, *guard_duty_finding.OldPolicy{HardExpiry: &strVal}.HardExpiry)
				require.Equal(t, strVal, *guard_duty_finding.OldPolicy{MaxPasswordAge: &strVal}.MaxPasswordAge)
				require.Equal(t, strVal, *guard_duty_finding.OldPolicy{MinimumPasswordLength: &strVal}.MinimumPasswordLength)
				require.Equal(t, strVal, *guard_duty_finding.OldPolicy{PasswordReusePrevention: &strVal}.PasswordReusePrevention)
				require.Equal(t, strVal, *guard_duty_finding.OldPolicy{RequireLowercaseCharacters: &strVal}.RequireLowercaseCharacters)
				require.Equal(t, strVal, *guard_duty_finding.OldPolicy{RequireNumbers: &strVal}.RequireNumbers)
				require.Equal(t, strVal, *guard_duty_finding.OldPolicy{RequireSymbols: &strVal}.RequireSymbols)
				require.Equal(t, strVal, *guard_duty_finding.OldPolicy{RequireUppercaseCharacters: &strVal}.RequireUppercaseCharacters)
			})
		})

		t.Run("Organization", func(t *testing.T) {
			genStruct := &guard_duty_finding.Organization{
				Asn:    &strVal,
				AsnOrg: &strVal,
				Isp:    &strVal,
				Org:    &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.Organization{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"asn"`, strVal, "Asn")
				requireJmesMatch(t, jsearch, `"asnOrg"`, strVal, "AsnOrg")
				requireJmesMatch(t, jsearch, `"isp"`, strVal, "Isp")
				requireJmesMatch(t, jsearch, `"org"`, strVal, "Org")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.Organization{Asn: &strVal}.Asn)
				require.Equal(t, strVal, *guard_duty_finding.Organization{AsnOrg: &strVal}.AsnOrg)
				require.Equal(t, strVal, *guard_duty_finding.Organization{Isp: &strVal}.Isp)
				require.Equal(t, strVal, *guard_duty_finding.Organization{Org: &strVal}.Org)
			})
		})

		t.Run("Organization1", func(t *testing.T) {
			genStruct := &guard_duty_finding.Organization1{
				Asn:    &strVal,
				AsnOrg: &strVal,
				Isp:    &strVal,
				Org:    &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.Organization1{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"asn"`, strVal, "Asn")
				requireJmesMatch(t, jsearch, `"asnOrg"`, strVal, "AsnOrg")
				requireJmesMatch(t, jsearch, `"isp"`, strVal, "Isp")
				requireJmesMatch(t, jsearch, `"org"`, strVal, "Org")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.Organization1{Asn: &strVal}.Asn)
				require.Equal(t, strVal, *guard_duty_finding.Organization1{AsnOrg: &strVal}.AsnOrg)
				require.Equal(t, strVal, *guard_duty_finding.Organization1{Isp: &strVal}.Isp)
				require.Equal(t, strVal, *guard_duty_finding.Organization1{Org: &strVal}.Org)
			})
		})

		t.Run("Organization2", func(t *testing.T) {
			genStruct := &guard_duty_finding.Organization2{
				Asn:    &strVal,
				AsnOrg: &strVal,
				Isp:    &strVal,
				Org:    &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.Organization2{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"asn"`, strVal, "Asn")
				requireJmesMatch(t, jsearch, `"asnOrg"`, strVal, "AsnOrg")
				requireJmesMatch(t, jsearch, `"isp"`, strVal, "Isp")
				requireJmesMatch(t, jsearch, `"org"`, strVal, "Org")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.Organization2{Asn: &strVal}.Asn)
				require.Equal(t, strVal, *guard_duty_finding.Organization2{AsnOrg: &strVal}.AsnOrg)
				require.Equal(t, strVal, *guard_duty_finding.Organization2{Isp: &strVal}.Isp)
				require.Equal(t, strVal, *guard_duty_finding.Organization2{Org: &strVal}.Org)
			})
		})

		t.Run("Organization3", func(t *testing.T) {
			genStruct := &guard_duty_finding.Organization3{
				Asn:    &strVal,
				AsnOrg: &strVal,
				Isp:    &strVal,
				Org:    &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.Organization3{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"asn"`, strVal, "Asn")
				requireJmesMatch(t, jsearch, `"asnOrg"`, strVal, "AsnOrg")
				requireJmesMatch(t, jsearch, `"isp"`, strVal, "Isp")
				requireJmesMatch(t, jsearch, `"org"`, strVal, "Org")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.Organization3{Asn: &strVal}.Asn)
				require.Equal(t, strVal, *guard_duty_finding.Organization3{AsnOrg: &strVal}.AsnOrg)
				require.Equal(t, strVal, *guard_duty_finding.Organization3{Isp: &strVal}.Isp)
				require.Equal(t, strVal, *guard_duty_finding.Organization3{Org: &strVal}.Org)
			})
		})

		t.Run("Organization4", func(t *testing.T) {
			genStruct := &guard_duty_finding.Organization4{
				Asn:    strVal,
				AsnOrg: strVal,
				Isp:    strVal,
				Org:    strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.Organization4{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"asn"`, strVal, "Asn")
				requireJmesMatch(t, jsearch, `"asnOrg"`, strVal, "AsnOrg")
				requireJmesMatch(t, jsearch, `"isp"`, strVal, "Isp")
				requireJmesMatch(t, jsearch, `"org"`, strVal, "Org")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, guard_duty_finding.Organization4{Asn: strVal}.Asn)
				require.Equal(t, strVal, guard_duty_finding.Organization4{AsnOrg: strVal}.AsnOrg)
				require.Equal(t, strVal, guard_duty_finding.Organization4{Isp: strVal}.Isp)
				require.Equal(t, strVal, guard_duty_finding.Organization4{Org: strVal}.Org)
			})
		})

		t.Run("Owner", func(t *testing.T) {
			genStruct := &guard_duty_finding.Owner{
				Id: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.Owner{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"id"`, strVal, "Id")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.Owner{Id: &strVal}.Id)
			})
		})

		t.Run("PermissionConfiguration", func(t *testing.T) {
			genStruct := &guard_duty_finding.PermissionConfiguration{
				AccountLevelPermissions: &guard_duty_finding.AccountLevelPermissions{
					BlockPublicAccess: &guard_duty_finding.BlockPublicAccess{
						BlockPublicAcls:       &trueVal,
						BlockPublicPolicy:     &trueVal,
						IgnorePublicAcls:      &trueVal,
						RestrictPublicBuckets: &trueVal,
					},
				},
				BucketLevelPermissions: &guard_duty_finding.BucketLevelPermissions{
					AccessControlList: &guard_duty_finding.AccessControlList{
						AllowsPublicReadAccess:  &trueVal,
						AllowsPublicWriteAccess: &trueVal,
					},
					BlockPublicAccess: &guard_duty_finding.BlockPublicAccess{
						BlockPublicAcls:       &trueVal,
						BlockPublicPolicy:     &trueVal,
						IgnorePublicAcls:      &trueVal,
						RestrictPublicBuckets: &trueVal,
					},
					BucketPolicy: &guard_duty_finding.AccessControlList{
						AllowsPublicReadAccess:  &trueVal,
						AllowsPublicWriteAccess: &trueVal,
					},
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.PermissionConfiguration{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("accountLevelPermissions")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("bucketLevelPermissions")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.AccountLevelPermissions) // Lazily Tested: guard_duty_finding.PermissionConfiguration.AccountLevelPermissions == *AccountLevelPermissions
				require.NotNil(t, genStruct.BucketLevelPermissions)  // Lazily Tested: guard_duty_finding.PermissionConfiguration.BucketLevelPermissions == *BucketLevelPermissions
			})
		})

		t.Run("PortProbeAction", func(t *testing.T) {
			genStruct := &guard_duty_finding.PortProbeAction{
				Blocked: &trueVal,
				PortProbeDetails: []guard_duty_finding.PortProbeActionItem{{
					LocalIpDetails: &guard_duty_finding.LocalIpDetails1{
						IpAddressV4: strVal,
					},
					LocalPortDetails: &guard_duty_finding.LocalPortDetails1{
						Port:     floatVal,
						PortName: strVal,
					},
					RemoteIpDetails: &guard_duty_finding.RemoteIpDetails4{
						City: &guard_duty_finding.City4{
							CityName: strVal,
						},
						Country: &guard_duty_finding.Country4{
							CountryName: strVal,
						},
						GeoLocation: &guard_duty_finding.GeoLocation1{
							Lat: floatVal,
							Lon: floatVal,
						},
						IpAddressV4: strVal,
						Organization: &guard_duty_finding.Organization4{
							Asn:    strVal,
							AsnOrg: strVal,
							Isp:    strVal,
							Org:    strVal,
						},
					},
				}},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.PortProbeAction{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"blocked"`, trueVal, "Blocked")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("portProbeDetails")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.Blocked)          // Lazily Tested: guard_duty_finding.PortProbeAction.Blocked == *bool
				require.NotNil(t, genStruct.PortProbeDetails) // Lazily Tested: guard_duty_finding.PortProbeAction.PortProbeDetails == []PortProbeActionItem
			})
		})

		t.Run("PortProbeActionItem", func(t *testing.T) {
			genStruct := &guard_duty_finding.PortProbeActionItem{
				LocalIpDetails: &guard_duty_finding.LocalIpDetails1{
					IpAddressV4: strVal,
				},
				LocalPortDetails: &guard_duty_finding.LocalPortDetails1{
					Port:     floatVal,
					PortName: strVal,
				},
				RemoteIpDetails: &guard_duty_finding.RemoteIpDetails4{
					City: &guard_duty_finding.City4{
						CityName: strVal,
					},
					Country: &guard_duty_finding.Country4{
						CountryName: strVal,
					},
					GeoLocation: &guard_duty_finding.GeoLocation1{
						Lat: floatVal,
						Lon: floatVal,
					},
					IpAddressV4: strVal,
					Organization: &guard_duty_finding.Organization4{
						Asn:    strVal,
						AsnOrg: strVal,
						Isp:    strVal,
						Org:    strVal,
					},
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.PortProbeActionItem{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("localIpDetails")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("localPortDetails")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("remoteIpDetails")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.LocalIpDetails)   // Lazily Tested: guard_duty_finding.PortProbeActionItem.LocalIpDetails == *LocalIpDetails1
				require.NotNil(t, genStruct.LocalPortDetails) // Lazily Tested: guard_duty_finding.PortProbeActionItem.LocalPortDetails == *LocalPortDetails1
				require.NotNil(t, genStruct.RemoteIpDetails)  // Lazily Tested: guard_duty_finding.PortProbeActionItem.RemoteIpDetails == *RemoteIpDetails4
			})
		})

		t.Run("ProfiledBehavior", func(t *testing.T) {
			genStruct := &guard_duty_finding.ProfiledBehavior{
				FrequentProfiledAPIsAccountProfiling:                      &strVal,
				FrequentProfiledAPIsUserIdentityProfiling:                 &strVal,
				FrequentProfiledASNsAccountProfiling:                      &strVal,
				FrequentProfiledASNsBucketProfiling:                       &strVal,
				FrequentProfiledASNsUserIdentityProfiling:                 &strVal,
				FrequentProfiledBucketsAccountProfiling:                   &strVal,
				FrequentProfiledBucketsUserIdentityProfiling:              &strVal,
				FrequentProfiledUserAgentsAccountProfiling:                &strVal,
				FrequentProfiledUserAgentsUserIdentityProfiling:           &strVal,
				FrequentProfiledUserNamesAccountProfiling:                 &strVal,
				FrequentProfiledUserNamesBucketProfiling:                  &strVal,
				FrequentProfiledUserTypesAccountProfiling:                 &strVal,
				InfrequentProfiledAPIsAccountProfiling:                    &strVal,
				InfrequentProfiledAPIsUserIdentityProfiling:               &strVal,
				InfrequentProfiledASNsAccountProfiling:                    &strVal,
				InfrequentProfiledASNsBucketProfiling:                     &strVal,
				InfrequentProfiledASNsUserIdentityProfiling:               &strVal,
				InfrequentProfiledBucketsAccountProfiling:                 &strVal,
				InfrequentProfiledBucketsUserIdentityProfiling:            &strVal,
				InfrequentProfiledUserAgentsAccountProfiling:              &strVal,
				InfrequentProfiledUserAgentsUserIdentityProfiling:         &strVal,
				InfrequentProfiledUserNamesAccountProfiling:               &strVal,
				InfrequentProfiledUserNamesBucketProfiling:                &strVal,
				InfrequentProfiledUserTypesAccountProfiling:               &strVal,
				NumberOfHistoricalDailyAvgAPIsBucketProfiling:             &strVal,
				NumberOfHistoricalDailyAvgAPIsBucketUserIdentityProfiling: &strVal,
				NumberOfHistoricalDailyAvgAPIsUserIdentityProfiling:       &strVal,
				NumberOfHistoricalDailyMaxAPIsBucketProfiling:             &strVal,
				NumberOfHistoricalDailyMaxAPIsBucketUserIdentityProfiling: &strVal,
				NumberOfHistoricalDailyMaxAPIsUserIdentityProfiling:       &strVal,
				RareProfiledAPIsAccountProfiling:                          &strVal,
				RareProfiledAPIsUserIdentityProfiling:                     &strVal,
				RareProfiledASNsAccountProfiling:                          &strVal,
				RareProfiledASNsBucketProfiling:                           &strVal,
				RareProfiledASNsUserIdentityProfiling:                     &strVal,
				RareProfiledBucketsAccountProfiling:                       &strVal,
				RareProfiledBucketsUserIdentityProfiling:                  &strVal,
				RareProfiledUserAgentsAccountProfiling:                    &strVal,
				RareProfiledUserAgentsUserIdentityProfiling:               &strVal,
				RareProfiledUserNamesAccountProfiling:                     &strVal,
				RareProfiledUserNamesBucketProfiling:                      &strVal,
				RareProfiledUserTypesAccountProfiling:                     &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.ProfiledBehavior{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"frequentProfiledAPIsAccountProfiling"`, strVal, "FrequentProfiledAPIsAccountProfiling")
				requireJmesMatch(t, jsearch, `"frequentProfiledAPIsUserIdentityProfiling"`, strVal, "FrequentProfiledAPIsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"frequentProfiledASNsAccountProfiling"`, strVal, "FrequentProfiledASNsAccountProfiling")
				requireJmesMatch(t, jsearch, `"frequentProfiledASNsBucketProfiling"`, strVal, "FrequentProfiledASNsBucketProfiling")
				requireJmesMatch(t, jsearch, `"frequentProfiledASNsUserIdentityProfiling"`, strVal, "FrequentProfiledASNsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"frequentProfiledBucketsAccountProfiling"`, strVal, "FrequentProfiledBucketsAccountProfiling")
				requireJmesMatch(t, jsearch, `"frequentProfiledBucketsUserIdentityProfiling"`, strVal, "FrequentProfiledBucketsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"frequentProfiledUserAgentsAccountProfiling"`, strVal, "FrequentProfiledUserAgentsAccountProfiling")
				requireJmesMatch(t, jsearch, `"frequentProfiledUserAgentsUserIdentityProfiling"`, strVal, "FrequentProfiledUserAgentsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"frequentProfiledUserNamesAccountProfiling"`, strVal, "FrequentProfiledUserNamesAccountProfiling")
				requireJmesMatch(t, jsearch, `"frequentProfiledUserNamesBucketProfiling"`, strVal, "FrequentProfiledUserNamesBucketProfiling")
				requireJmesMatch(t, jsearch, `"frequentProfiledUserTypesAccountProfiling"`, strVal, "FrequentProfiledUserTypesAccountProfiling")
				requireJmesMatch(t, jsearch, `"infrequentProfiledAPIsAccountProfiling"`, strVal, "InfrequentProfiledAPIsAccountProfiling")
				requireJmesMatch(t, jsearch, `"infrequentProfiledAPIsUserIdentityProfiling"`, strVal, "InfrequentProfiledAPIsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"infrequentProfiledASNsAccountProfiling"`, strVal, "InfrequentProfiledASNsAccountProfiling")
				requireJmesMatch(t, jsearch, `"infrequentProfiledASNsBucketProfiling"`, strVal, "InfrequentProfiledASNsBucketProfiling")
				requireJmesMatch(t, jsearch, `"infrequentProfiledASNsUserIdentityProfiling"`, strVal, "InfrequentProfiledASNsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"infrequentProfiledBucketsAccountProfiling"`, strVal, "InfrequentProfiledBucketsAccountProfiling")
				requireJmesMatch(t, jsearch, `"infrequentProfiledBucketsUserIdentityProfiling"`, strVal, "InfrequentProfiledBucketsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"infrequentProfiledUserAgentsAccountProfiling"`, strVal, "InfrequentProfiledUserAgentsAccountProfiling")
				requireJmesMatch(t, jsearch, `"infrequentProfiledUserAgentsUserIdentityProfiling"`, strVal, "InfrequentProfiledUserAgentsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"infrequentProfiledUserNamesAccountProfiling"`, strVal, "InfrequentProfiledUserNamesAccountProfiling")
				requireJmesMatch(t, jsearch, `"infrequentProfiledUserNamesBucketProfiling"`, strVal, "InfrequentProfiledUserNamesBucketProfiling")
				requireJmesMatch(t, jsearch, `"infrequentProfiledUserTypesAccountProfiling"`, strVal, "InfrequentProfiledUserTypesAccountProfiling")
				requireJmesMatch(t, jsearch, `"numberOfHistoricalDailyAvgAPIsBucketProfiling"`, strVal, "NumberOfHistoricalDailyAvgAPIsBucketProfiling")
				requireJmesMatch(t, jsearch, `"numberOfHistoricalDailyAvgAPIsBucketUserIdentityProfiling"`, strVal, "NumberOfHistoricalDailyAvgAPIsBucketUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"numberOfHistoricalDailyAvgAPIsUserIdentityProfiling"`, strVal, "NumberOfHistoricalDailyAvgAPIsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"numberOfHistoricalDailyMaxAPIsBucketProfiling"`, strVal, "NumberOfHistoricalDailyMaxAPIsBucketProfiling")
				requireJmesMatch(t, jsearch, `"numberOfHistoricalDailyMaxAPIsBucketUserIdentityProfiling"`, strVal, "NumberOfHistoricalDailyMaxAPIsBucketUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"numberOfHistoricalDailyMaxAPIsUserIdentityProfiling"`, strVal, "NumberOfHistoricalDailyMaxAPIsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"rareProfiledAPIsAccountProfiling"`, strVal, "RareProfiledAPIsAccountProfiling")
				requireJmesMatch(t, jsearch, `"rareProfiledAPIsUserIdentityProfiling"`, strVal, "RareProfiledAPIsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"rareProfiledASNsAccountProfiling"`, strVal, "RareProfiledASNsAccountProfiling")
				requireJmesMatch(t, jsearch, `"rareProfiledASNsBucketProfiling"`, strVal, "RareProfiledASNsBucketProfiling")
				requireJmesMatch(t, jsearch, `"rareProfiledASNsUserIdentityProfiling"`, strVal, "RareProfiledASNsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"rareProfiledBucketsAccountProfiling"`, strVal, "RareProfiledBucketsAccountProfiling")
				requireJmesMatch(t, jsearch, `"rareProfiledBucketsUserIdentityProfiling"`, strVal, "RareProfiledBucketsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"rareProfiledUserAgentsAccountProfiling"`, strVal, "RareProfiledUserAgentsAccountProfiling")
				requireJmesMatch(t, jsearch, `"rareProfiledUserAgentsUserIdentityProfiling"`, strVal, "RareProfiledUserAgentsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"rareProfiledUserNamesAccountProfiling"`, strVal, "RareProfiledUserNamesAccountProfiling")
				requireJmesMatch(t, jsearch, `"rareProfiledUserNamesBucketProfiling"`, strVal, "RareProfiledUserNamesBucketProfiling")
				requireJmesMatch(t, jsearch, `"rareProfiledUserTypesAccountProfiling"`, strVal, "RareProfiledUserTypesAccountProfiling")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{FrequentProfiledAPIsAccountProfiling: &strVal}.FrequentProfiledAPIsAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{FrequentProfiledAPIsUserIdentityProfiling: &strVal}.FrequentProfiledAPIsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{FrequentProfiledASNsAccountProfiling: &strVal}.FrequentProfiledASNsAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{FrequentProfiledASNsBucketProfiling: &strVal}.FrequentProfiledASNsBucketProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{FrequentProfiledASNsUserIdentityProfiling: &strVal}.FrequentProfiledASNsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{FrequentProfiledBucketsAccountProfiling: &strVal}.FrequentProfiledBucketsAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{FrequentProfiledBucketsUserIdentityProfiling: &strVal}.FrequentProfiledBucketsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{FrequentProfiledUserAgentsAccountProfiling: &strVal}.FrequentProfiledUserAgentsAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{FrequentProfiledUserAgentsUserIdentityProfiling: &strVal}.FrequentProfiledUserAgentsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{FrequentProfiledUserNamesAccountProfiling: &strVal}.FrequentProfiledUserNamesAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{FrequentProfiledUserNamesBucketProfiling: &strVal}.FrequentProfiledUserNamesBucketProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{FrequentProfiledUserTypesAccountProfiling: &strVal}.FrequentProfiledUserTypesAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{InfrequentProfiledAPIsAccountProfiling: &strVal}.InfrequentProfiledAPIsAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{InfrequentProfiledAPIsUserIdentityProfiling: &strVal}.InfrequentProfiledAPIsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{InfrequentProfiledASNsAccountProfiling: &strVal}.InfrequentProfiledASNsAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{InfrequentProfiledASNsBucketProfiling: &strVal}.InfrequentProfiledASNsBucketProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{InfrequentProfiledASNsUserIdentityProfiling: &strVal}.InfrequentProfiledASNsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{InfrequentProfiledBucketsAccountProfiling: &strVal}.InfrequentProfiledBucketsAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{InfrequentProfiledBucketsUserIdentityProfiling: &strVal}.InfrequentProfiledBucketsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{InfrequentProfiledUserAgentsAccountProfiling: &strVal}.InfrequentProfiledUserAgentsAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{InfrequentProfiledUserAgentsUserIdentityProfiling: &strVal}.InfrequentProfiledUserAgentsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{InfrequentProfiledUserNamesAccountProfiling: &strVal}.InfrequentProfiledUserNamesAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{InfrequentProfiledUserNamesBucketProfiling: &strVal}.InfrequentProfiledUserNamesBucketProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{InfrequentProfiledUserTypesAccountProfiling: &strVal}.InfrequentProfiledUserTypesAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{NumberOfHistoricalDailyAvgAPIsBucketProfiling: &strVal}.NumberOfHistoricalDailyAvgAPIsBucketProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{NumberOfHistoricalDailyAvgAPIsBucketUserIdentityProfiling: &strVal}.NumberOfHistoricalDailyAvgAPIsBucketUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{NumberOfHistoricalDailyAvgAPIsUserIdentityProfiling: &strVal}.NumberOfHistoricalDailyAvgAPIsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{NumberOfHistoricalDailyMaxAPIsBucketProfiling: &strVal}.NumberOfHistoricalDailyMaxAPIsBucketProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{NumberOfHistoricalDailyMaxAPIsBucketUserIdentityProfiling: &strVal}.NumberOfHistoricalDailyMaxAPIsBucketUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{NumberOfHistoricalDailyMaxAPIsUserIdentityProfiling: &strVal}.NumberOfHistoricalDailyMaxAPIsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{RareProfiledAPIsAccountProfiling: &strVal}.RareProfiledAPIsAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{RareProfiledAPIsUserIdentityProfiling: &strVal}.RareProfiledAPIsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{RareProfiledASNsAccountProfiling: &strVal}.RareProfiledASNsAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{RareProfiledASNsBucketProfiling: &strVal}.RareProfiledASNsBucketProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{RareProfiledASNsUserIdentityProfiling: &strVal}.RareProfiledASNsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{RareProfiledBucketsAccountProfiling: &strVal}.RareProfiledBucketsAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{RareProfiledBucketsUserIdentityProfiling: &strVal}.RareProfiledBucketsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{RareProfiledUserAgentsAccountProfiling: &strVal}.RareProfiledUserAgentsAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{RareProfiledUserAgentsUserIdentityProfiling: &strVal}.RareProfiledUserAgentsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{RareProfiledUserNamesAccountProfiling: &strVal}.RareProfiledUserNamesAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{RareProfiledUserNamesBucketProfiling: &strVal}.RareProfiledUserNamesBucketProfiling)
				require.Equal(t, strVal, *guard_duty_finding.ProfiledBehavior{RareProfiledUserTypesAccountProfiling: &strVal}.RareProfiledUserTypesAccountProfiling)
			})
		})

		t.Run("PublicAccess", func(t *testing.T) {
			genStruct := &guard_duty_finding.PublicAccess{
				EffectivePermission: &strVal,
				PermissionConfiguration: &guard_duty_finding.PermissionConfiguration{
					AccountLevelPermissions: &guard_duty_finding.AccountLevelPermissions{
						BlockPublicAccess: &guard_duty_finding.BlockPublicAccess{
							BlockPublicAcls:       &trueVal,
							BlockPublicPolicy:     &trueVal,
							IgnorePublicAcls:      &trueVal,
							RestrictPublicBuckets: &trueVal,
						},
					},
					BucketLevelPermissions: &guard_duty_finding.BucketLevelPermissions{
						AccessControlList: &guard_duty_finding.AccessControlList{
							AllowsPublicReadAccess:  &trueVal,
							AllowsPublicWriteAccess: &trueVal,
						},
						BlockPublicAccess: &guard_duty_finding.BlockPublicAccess{
							BlockPublicAcls:       &trueVal,
							BlockPublicPolicy:     &trueVal,
							IgnorePublicAcls:      &trueVal,
							RestrictPublicBuckets: &trueVal,
						},
						BucketPolicy: &guard_duty_finding.AccessControlList{
							AllowsPublicReadAccess:  &trueVal,
							AllowsPublicWriteAccess: &trueVal,
						},
					},
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.PublicAccess{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"effectivePermission"`, strVal, "EffectivePermission")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("permissionConfiguration")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.PublicAccess{EffectivePermission: &strVal}.EffectivePermission)
				require.NotNil(t, genStruct.PermissionConfiguration) // Lazily Tested: guard_duty_finding.PublicAccess.PermissionConfiguration == *PermissionConfiguration
			})
		})

		t.Run("RemoteAccountDetails", func(t *testing.T) {
			genStruct := &guard_duty_finding.RemoteAccountDetails{
				AccountId:  &strVal,
				Affiliated: &trueVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.RemoteAccountDetails{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"accountId"`, strVal, "AccountId")
				requireJmesMatch(t, jsearch, `"affiliated"`, trueVal, "Affiliated")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.RemoteAccountDetails{AccountId: &strVal}.AccountId)
				require.NotNil(t, genStruct.Affiliated) // Lazily Tested: guard_duty_finding.RemoteAccountDetails.Affiliated == *bool
			})
		})

		t.Run("RemoteIpDetails", func(t *testing.T) {
			genStruct := &guard_duty_finding.RemoteIpDetails{
				City: &guard_duty_finding.City{
					CityName: &strVal,
				},
				Country: &guard_duty_finding.Country{
					CountryName: &strVal,
				},
				GeoLocation: &guard_duty_finding.GeoLocation{
					Lat: &floatVal,
					Lon: &floatVal,
				},
				IpAddressV4: &strVal,
				Organization: &guard_duty_finding.Organization{
					Asn:    &strVal,
					AsnOrg: &strVal,
					Isp:    &strVal,
					Org:    &strVal,
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.RemoteIpDetails{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("city")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("country")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("geoLocation")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"ipAddressV4"`, strVal, "IpAddressV4")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("organization")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.City)        // Lazily Tested: guard_duty_finding.RemoteIpDetails.City == *City
				require.NotNil(t, genStruct.Country)     // Lazily Tested: guard_duty_finding.RemoteIpDetails.Country == *Country
				require.NotNil(t, genStruct.GeoLocation) // Lazily Tested: guard_duty_finding.RemoteIpDetails.GeoLocation == *GeoLocation
				require.Equal(t, strVal, *guard_duty_finding.RemoteIpDetails{IpAddressV4: &strVal}.IpAddressV4)
				require.NotNil(t, genStruct.Organization) // Lazily Tested: guard_duty_finding.RemoteIpDetails.Organization == *Organization
			})
		})

		t.Run("RemoteIpDetails1", func(t *testing.T) {
			genStruct := &guard_duty_finding.RemoteIpDetails1{
				City: &guard_duty_finding.City1{
					CityName: &strVal,
				},
				Country: &guard_duty_finding.Country1{
					CountryName: &strVal,
				},
				GeoLocation: &guard_duty_finding.GeoLocation{
					Lat: &floatVal,
					Lon: &floatVal,
				},
				IpAddressV4: &strVal,
				Organization: &guard_duty_finding.Organization1{
					Asn:    &strVal,
					AsnOrg: &strVal,
					Isp:    &strVal,
					Org:    &strVal,
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.RemoteIpDetails1{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("city")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("country")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("geoLocation")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"ipAddressV4"`, strVal, "IpAddressV4")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("organization")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.City)        // Lazily Tested: guard_duty_finding.RemoteIpDetails1.City == *City1
				require.NotNil(t, genStruct.Country)     // Lazily Tested: guard_duty_finding.RemoteIpDetails1.Country == *Country1
				require.NotNil(t, genStruct.GeoLocation) // Lazily Tested: guard_duty_finding.RemoteIpDetails1.GeoLocation == *GeoLocation
				require.Equal(t, strVal, *guard_duty_finding.RemoteIpDetails1{IpAddressV4: &strVal}.IpAddressV4)
				require.NotNil(t, genStruct.Organization) // Lazily Tested: guard_duty_finding.RemoteIpDetails1.Organization == *Organization1
			})
		})

		t.Run("RemoteIpDetails2", func(t *testing.T) {
			genStruct := &guard_duty_finding.RemoteIpDetails2{
				City: &guard_duty_finding.City2{
					CityName: &strVal,
				},
				Country: &guard_duty_finding.Country2{
					CountryName: &strVal,
				},
				GeoLocation: &guard_duty_finding.GeoLocation{
					Lat: &floatVal,
					Lon: &floatVal,
				},
				IpAddressV4: &strVal,
				Organization: &guard_duty_finding.Organization2{
					Asn:    &strVal,
					AsnOrg: &strVal,
					Isp:    &strVal,
					Org:    &strVal,
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.RemoteIpDetails2{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("city")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("country")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("geoLocation")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"ipAddressV4"`, strVal, "IpAddressV4")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("organization")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.City)        // Lazily Tested: guard_duty_finding.RemoteIpDetails2.City == *City2
				require.NotNil(t, genStruct.Country)     // Lazily Tested: guard_duty_finding.RemoteIpDetails2.Country == *Country2
				require.NotNil(t, genStruct.GeoLocation) // Lazily Tested: guard_duty_finding.RemoteIpDetails2.GeoLocation == *GeoLocation
				require.Equal(t, strVal, *guard_duty_finding.RemoteIpDetails2{IpAddressV4: &strVal}.IpAddressV4)
				require.NotNil(t, genStruct.Organization) // Lazily Tested: guard_duty_finding.RemoteIpDetails2.Organization == *Organization2
			})
		})

		t.Run("RemoteIpDetails3", func(t *testing.T) {
			genStruct := &guard_duty_finding.RemoteIpDetails3{
				City: &guard_duty_finding.City3{
					CityName: &strVal,
				},
				Country: &guard_duty_finding.Country3{
					CountryName: &strVal,
				},
				GeoLocation: &guard_duty_finding.GeoLocation{
					Lat: &floatVal,
					Lon: &floatVal,
				},
				IpAddressV4: &strVal,
				Organization: &guard_duty_finding.Organization3{
					Asn:    &strVal,
					AsnOrg: &strVal,
					Isp:    &strVal,
					Org:    &strVal,
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.RemoteIpDetails3{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("city")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("country")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("geoLocation")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"ipAddressV4"`, strVal, "IpAddressV4")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("organization")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.City)        // Lazily Tested: guard_duty_finding.RemoteIpDetails3.City == *City3
				require.NotNil(t, genStruct.Country)     // Lazily Tested: guard_duty_finding.RemoteIpDetails3.Country == *Country3
				require.NotNil(t, genStruct.GeoLocation) // Lazily Tested: guard_duty_finding.RemoteIpDetails3.GeoLocation == *GeoLocation
				require.Equal(t, strVal, *guard_duty_finding.RemoteIpDetails3{IpAddressV4: &strVal}.IpAddressV4)
				require.NotNil(t, genStruct.Organization) // Lazily Tested: guard_duty_finding.RemoteIpDetails3.Organization == *Organization3
			})
		})

		t.Run("RemoteIpDetails4", func(t *testing.T) {
			genStruct := &guard_duty_finding.RemoteIpDetails4{
				City: &guard_duty_finding.City4{
					CityName: strVal,
				},
				Country: &guard_duty_finding.Country4{
					CountryName: strVal,
				},
				GeoLocation: &guard_duty_finding.GeoLocation1{
					Lat: floatVal,
					Lon: floatVal,
				},
				IpAddressV4: strVal,
				Organization: &guard_duty_finding.Organization4{
					Asn:    strVal,
					AsnOrg: strVal,
					Isp:    strVal,
					Org:    strVal,
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.RemoteIpDetails4{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("city")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("country")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("geoLocation")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"ipAddressV4"`, strVal, "IpAddressV4")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("organization")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.City)        // Lazily Tested: guard_duty_finding.RemoteIpDetails4.City == *City4
				require.NotNil(t, genStruct.Country)     // Lazily Tested: guard_duty_finding.RemoteIpDetails4.Country == *Country4
				require.NotNil(t, genStruct.GeoLocation) // Lazily Tested: guard_duty_finding.RemoteIpDetails4.GeoLocation == *GeoLocation1
				require.Equal(t, strVal, guard_duty_finding.RemoteIpDetails4{IpAddressV4: strVal}.IpAddressV4)
				require.NotNil(t, genStruct.Organization) // Lazily Tested: guard_duty_finding.RemoteIpDetails4.Organization == *Organization4
			})
		})

		t.Run("RemotePortDetails", func(t *testing.T) {
			genStruct := &guard_duty_finding.RemotePortDetails{
				Port:     &floatVal,
				PortName: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.RemotePortDetails{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"port"`, floatVal, "Port")
				requireJmesMatch(t, jsearch, `"portName"`, strVal, "PortName")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, floatVal, *guard_duty_finding.RemotePortDetails{Port: &floatVal}.Port)
				require.Equal(t, strVal, *guard_duty_finding.RemotePortDetails{PortName: &strVal}.PortName)
			})
		})

		t.Run("Resource", func(t *testing.T) {
			genStruct := &guard_duty_finding.Resource{
				AccessKeyDetails: &guard_duty_finding.AccessKeyDetails{
					AccessKeyId: &strVal,
					PrincipalId: &strVal,
					UserName:    &strVal,
					UserType:    &strVal,
				},
				ContainerDetails: &guard_duty_finding.ContainerDetails{
					Id:    &strVal,
					Image: &strVal,
					Name:  &strVal,
				},
				EbsVolumeDetails: &guard_duty_finding.EbsVolumeDetails{
					ScannedVolumeDetails: []guard_duty_finding.EbsVolumeDetailsItem{{
						DeviceName:     strVal,
						EncryptionType: strVal,
						KmsKeyArn:      anyVal,
						SnapshotArn:    strVal,
						VolumeArn:      strVal,
						VolumeSizeInGB: floatVal,
						VolumeType:     strVal,
					}},
					SkippedVolumeDetails: anyVal,
				},
				EcsClusterDetails: &guard_duty_finding.EcsClusterDetails{
					Arn:    &strVal,
					Name:   &strVal,
					Status: &strVal,
					Tags: []guard_duty_finding.EcsClusterDetailsItem{{
						Key:   strVal,
						Value: strVal,
					}},
					TaskDetails: &guard_duty_finding.TaskDetails{
						Arn: &strVal,
						Containers: []guard_duty_finding.TaskDetailsItem{{
							Image: strVal,
							Name:  strVal,
						}},
						CreatedAt:     &floatVal,
						DefinitionArn: &strVal,
						StartedAt:     &floatVal,
						StartedBy:     &strVal,
						Version:       &strVal,
					},
				},
				EksClusterDetails: &guard_duty_finding.EksClusterDetails{
					Arn:       &strVal,
					CreatedAt: &floatVal,
					Name:      &strVal,
					Status:    &strVal,
					Tags: []guard_duty_finding.EcsClusterDetailsItem{{
						Key:   strVal,
						Value: strVal,
					}},
					VpcId: &strVal,
				},
				InstanceDetails: &guard_duty_finding.InstanceDetails{
					AvailabilityZone: &strVal,
					IamInstanceProfile: &guard_duty_finding.IamInstanceProfile{
						Arn: &strVal,
						Id:  &strVal,
					},
					ImageDescription: &strVal,
					ImageId:          &strVal,
					InstanceId:       &strVal,
					InstanceState:    &strVal,
					InstanceType:     &strVal,
					LaunchTime:       &timeVal,
					NetworkInterfaces: []guard_duty_finding.InstanceDetailsItem{{
						Ipv6Addresses:      []guard_duty_finding.Ipv6AddressesItems{anyVal},
						NetworkInterfaceId: strVal,
						PrivateDnsName:     strVal,
						PrivateIpAddress:   strVal,
						PrivateIpAddresses: []guard_duty_finding.InstanceDetailsItemItem{{
							PrivateDnsName:   strVal,
							PrivateIpAddress: strVal,
						}},
						PublicDnsName: strVal,
						PublicIp:      strVal,
						SecurityGroups: []guard_duty_finding.InstanceDetailsItemItem1{{
							GroupId:   strVal,
							GroupName: strVal,
						}},
						SubnetId: strVal,
						VpcId:    strVal,
					}},
					OutpostArn: &strVal,
					Platform:   anyVal,
					ProductCodes: []guard_duty_finding.InstanceDetailsItem1{{
						ProductCodeId:   strVal,
						ProductCodeType: strVal,
					}},
					Tags: []guard_duty_finding.EcsClusterDetailsItem{{
						Key:   strVal,
						Value: strVal,
					}},
				},
				KubernetesDetails: &guard_duty_finding.KubernetesDetails{
					KubernetesUserDetails: &guard_duty_finding.KubernetesUserDetails{
						Groups:   []string{strVal},
						Uid:      &strVal,
						Username: &strVal,
					},
					KubernetesWorkloadDetails: &guard_duty_finding.KubernetesWorkloadDetails{
						Containers: []guard_duty_finding.KubernetesWorkloadDetailsItem{{
							Image:       strVal,
							ImagePrefix: strVal,
							Name:        strVal,
							SecurityContext: &guard_duty_finding.SecurityContext{
								Privileged: trueVal,
							},
						}},
						Name:      &strVal,
						Namespace: &strVal,
						Type:      &strVal,
						Uid:       &strVal,
					},
				},
				ResourceType: strVal,
				S3BucketDetails: []guard_duty_finding.ResourceItem{{
					Arn:       &strVal,
					CreatedAt: &floatVal,
					DefaultServerSideEncryption: &guard_duty_finding.DefaultServerSideEncryption{
						EncryptionType:  &strVal,
						KmsMasterKeyArn: &strVal,
					},
					Name: strVal,
					Owner: &guard_duty_finding.Owner{
						Id: &strVal,
					},
					PublicAccess: &guard_duty_finding.PublicAccess{
						EffectivePermission: &strVal,
						PermissionConfiguration: &guard_duty_finding.PermissionConfiguration{
							AccountLevelPermissions: &guard_duty_finding.AccountLevelPermissions{
								BlockPublicAccess: &guard_duty_finding.BlockPublicAccess{
									BlockPublicAcls:       &trueVal,
									BlockPublicPolicy:     &trueVal,
									IgnorePublicAcls:      &trueVal,
									RestrictPublicBuckets: &trueVal,
								},
							},
							BucketLevelPermissions: &guard_duty_finding.BucketLevelPermissions{
								AccessControlList: &guard_duty_finding.AccessControlList{
									AllowsPublicReadAccess:  &trueVal,
									AllowsPublicWriteAccess: &trueVal,
								},
								BlockPublicAccess: &guard_duty_finding.BlockPublicAccess{
									BlockPublicAcls:       &trueVal,
									BlockPublicPolicy:     &trueVal,
									IgnorePublicAcls:      &trueVal,
									RestrictPublicBuckets: &trueVal,
								},
								BucketPolicy: &guard_duty_finding.AccessControlList{
									AllowsPublicReadAccess:  &trueVal,
									AllowsPublicWriteAccess: &trueVal,
								},
							},
						},
					},
					Tags: []guard_duty_finding.EcsClusterDetailsItem{{
						Key:   strVal,
						Value: strVal,
					}},
					Type: strVal,
				}},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.Resource{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("accessKeyDetails")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("containerDetails")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("ebsVolumeDetails")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("ecsClusterDetails")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("eksClusterDetails")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("instanceDetails")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("kubernetesDetails")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"resourceType"`, strVal, "ResourceType")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("s3BucketDetails")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.AccessKeyDetails)  // Lazily Tested: guard_duty_finding.Resource.AccessKeyDetails == *AccessKeyDetails
				require.NotNil(t, genStruct.ContainerDetails)  // Lazily Tested: guard_duty_finding.Resource.ContainerDetails == *ContainerDetails
				require.NotNil(t, genStruct.EbsVolumeDetails)  // Lazily Tested: guard_duty_finding.Resource.EbsVolumeDetails == *EbsVolumeDetails
				require.NotNil(t, genStruct.EcsClusterDetails) // Lazily Tested: guard_duty_finding.Resource.EcsClusterDetails == *EcsClusterDetails
				require.NotNil(t, genStruct.EksClusterDetails) // Lazily Tested: guard_duty_finding.Resource.EksClusterDetails == *EksClusterDetails
				require.NotNil(t, genStruct.InstanceDetails)   // Lazily Tested: guard_duty_finding.Resource.InstanceDetails == *InstanceDetails
				require.NotNil(t, genStruct.KubernetesDetails) // Lazily Tested: guard_duty_finding.Resource.KubernetesDetails == *KubernetesDetails
				require.Equal(t, strVal, guard_duty_finding.Resource{ResourceType: strVal}.ResourceType)
				require.NotNil(t, genStruct.S3BucketDetails) // Lazily Tested: guard_duty_finding.Resource.S3BucketDetails == []ResourceItem
			})
		})

		t.Run("ResourceItem", func(t *testing.T) {
			genStruct := &guard_duty_finding.ResourceItem{
				Arn:       &strVal,
				CreatedAt: &floatVal,
				DefaultServerSideEncryption: &guard_duty_finding.DefaultServerSideEncryption{
					EncryptionType:  &strVal,
					KmsMasterKeyArn: &strVal,
				},
				Name: strVal,
				Owner: &guard_duty_finding.Owner{
					Id: &strVal,
				},
				PublicAccess: &guard_duty_finding.PublicAccess{
					EffectivePermission: &strVal,
					PermissionConfiguration: &guard_duty_finding.PermissionConfiguration{
						AccountLevelPermissions: &guard_duty_finding.AccountLevelPermissions{
							BlockPublicAccess: &guard_duty_finding.BlockPublicAccess{
								BlockPublicAcls:       &trueVal,
								BlockPublicPolicy:     &trueVal,
								IgnorePublicAcls:      &trueVal,
								RestrictPublicBuckets: &trueVal,
							},
						},
						BucketLevelPermissions: &guard_duty_finding.BucketLevelPermissions{
							AccessControlList: &guard_duty_finding.AccessControlList{
								AllowsPublicReadAccess:  &trueVal,
								AllowsPublicWriteAccess: &trueVal,
							},
							BlockPublicAccess: &guard_duty_finding.BlockPublicAccess{
								BlockPublicAcls:       &trueVal,
								BlockPublicPolicy:     &trueVal,
								IgnorePublicAcls:      &trueVal,
								RestrictPublicBuckets: &trueVal,
							},
							BucketPolicy: &guard_duty_finding.AccessControlList{
								AllowsPublicReadAccess:  &trueVal,
								AllowsPublicWriteAccess: &trueVal,
							},
						},
					},
				},
				Tags: []guard_duty_finding.EcsClusterDetailsItem{{
					Key:   strVal,
					Value: strVal,
				}},
				Type: strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.ResourceItem{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"arn"`, strVal, "Arn")
				requireJmesMatch(t, jsearch, `"createdAt"`, floatVal, "CreatedAt")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("defaultServerSideEncryption")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"name"`, strVal, "Name")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("owner")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("publicAccess")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("tags")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"type"`, strVal, "Type")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.ResourceItem{Arn: &strVal}.Arn)
				require.Equal(t, floatVal, *guard_duty_finding.ResourceItem{CreatedAt: &floatVal}.CreatedAt)
				require.NotNil(t, genStruct.DefaultServerSideEncryption) // Lazily Tested: guard_duty_finding.ResourceItem.DefaultServerSideEncryption == *DefaultServerSideEncryption
				require.Equal(t, strVal, guard_duty_finding.ResourceItem{Name: strVal}.Name)
				require.NotNil(t, genStruct.Owner)        // Lazily Tested: guard_duty_finding.ResourceItem.Owner == *Owner
				require.NotNil(t, genStruct.PublicAccess) // Lazily Tested: guard_duty_finding.ResourceItem.PublicAccess == *PublicAccess
				require.NotNil(t, genStruct.Tags)         // Lazily Tested: guard_duty_finding.ResourceItem.Tags == []EcsClusterDetailsItem
				require.Equal(t, strVal, guard_duty_finding.ResourceItem{Type: strVal}.Type)
			})
		})

		t.Run("Root", func(t *testing.T) {
			genStruct := &guard_duty_finding.Root{
				Account: strVal,
				Detail: &guard_duty_finding.GuardDutyFinding{
					AccountId:   strVal,
					Arn:         strVal,
					CreatedAt:   timeVal,
					Description: strVal,
					Id:          strVal,
					Partition:   strVal,
					Region:      strVal,
					Resource: &guard_duty_finding.Resource{
						AccessKeyDetails: &guard_duty_finding.AccessKeyDetails{
							AccessKeyId: &strVal,
							PrincipalId: &strVal,
							UserName:    &strVal,
							UserType:    &strVal,
						},
						ContainerDetails: &guard_duty_finding.ContainerDetails{
							Id:    &strVal,
							Image: &strVal,
							Name:  &strVal,
						},
						EbsVolumeDetails: &guard_duty_finding.EbsVolumeDetails{
							ScannedVolumeDetails: []guard_duty_finding.EbsVolumeDetailsItem{{
								DeviceName:     strVal,
								EncryptionType: strVal,
								KmsKeyArn:      anyVal,
								SnapshotArn:    strVal,
								VolumeArn:      strVal,
								VolumeSizeInGB: floatVal,
								VolumeType:     strVal,
							}},
							SkippedVolumeDetails: anyVal,
						},
						EcsClusterDetails: &guard_duty_finding.EcsClusterDetails{
							Arn:    &strVal,
							Name:   &strVal,
							Status: &strVal,
							Tags: []guard_duty_finding.EcsClusterDetailsItem{{
								Key:   strVal,
								Value: strVal,
							}},
							TaskDetails: &guard_duty_finding.TaskDetails{
								Arn: &strVal,
								Containers: []guard_duty_finding.TaskDetailsItem{{
									Image: strVal,
									Name:  strVal,
								}},
								CreatedAt:     &floatVal,
								DefinitionArn: &strVal,
								StartedAt:     &floatVal,
								StartedBy:     &strVal,
								Version:       &strVal,
							},
						},
						EksClusterDetails: &guard_duty_finding.EksClusterDetails{
							Arn:       &strVal,
							CreatedAt: &floatVal,
							Name:      &strVal,
							Status:    &strVal,
							Tags: []guard_duty_finding.EcsClusterDetailsItem{{
								Key:   strVal,
								Value: strVal,
							}},
							VpcId: &strVal,
						},
						InstanceDetails: &guard_duty_finding.InstanceDetails{
							AvailabilityZone: &strVal,
							IamInstanceProfile: &guard_duty_finding.IamInstanceProfile{
								Arn: &strVal,
								Id:  &strVal,
							},
							ImageDescription: &strVal,
							ImageId:          &strVal,
							InstanceId:       &strVal,
							InstanceState:    &strVal,
							InstanceType:     &strVal,
							LaunchTime:       &timeVal,
							NetworkInterfaces: []guard_duty_finding.InstanceDetailsItem{{
								Ipv6Addresses:      []guard_duty_finding.Ipv6AddressesItems{anyVal},
								NetworkInterfaceId: strVal,
								PrivateDnsName:     strVal,
								PrivateIpAddress:   strVal,
								PrivateIpAddresses: []guard_duty_finding.InstanceDetailsItemItem{{
									PrivateDnsName:   strVal,
									PrivateIpAddress: strVal,
								}},
								PublicDnsName: strVal,
								PublicIp:      strVal,
								SecurityGroups: []guard_duty_finding.InstanceDetailsItemItem1{{
									GroupId:   strVal,
									GroupName: strVal,
								}},
								SubnetId: strVal,
								VpcId:    strVal,
							}},
							OutpostArn: &strVal,
							Platform:   anyVal,
							ProductCodes: []guard_duty_finding.InstanceDetailsItem1{{
								ProductCodeId:   strVal,
								ProductCodeType: strVal,
							}},
							Tags: []guard_duty_finding.EcsClusterDetailsItem{{
								Key:   strVal,
								Value: strVal,
							}},
						},
						KubernetesDetails: &guard_duty_finding.KubernetesDetails{
							KubernetesUserDetails: &guard_duty_finding.KubernetesUserDetails{
								Groups:   []string{strVal},
								Uid:      &strVal,
								Username: &strVal,
							},
							KubernetesWorkloadDetails: &guard_duty_finding.KubernetesWorkloadDetails{
								Containers: []guard_duty_finding.KubernetesWorkloadDetailsItem{{
									Image:       strVal,
									ImagePrefix: strVal,
									Name:        strVal,
									SecurityContext: &guard_duty_finding.SecurityContext{
										Privileged: trueVal,
									},
								}},
								Name:      &strVal,
								Namespace: &strVal,
								Type:      &strVal,
								Uid:       &strVal,
							},
						},
						ResourceType: strVal,
						S3BucketDetails: []guard_duty_finding.ResourceItem{{
							Arn:       &strVal,
							CreatedAt: &floatVal,
							DefaultServerSideEncryption: &guard_duty_finding.DefaultServerSideEncryption{
								EncryptionType:  &strVal,
								KmsMasterKeyArn: &strVal,
							},
							Name: strVal,
							Owner: &guard_duty_finding.Owner{
								Id: &strVal,
							},
							PublicAccess: &guard_duty_finding.PublicAccess{
								EffectivePermission: &strVal,
								PermissionConfiguration: &guard_duty_finding.PermissionConfiguration{
									AccountLevelPermissions: &guard_duty_finding.AccountLevelPermissions{
										BlockPublicAccess: &guard_duty_finding.BlockPublicAccess{
											BlockPublicAcls:       &trueVal,
											BlockPublicPolicy:     &trueVal,
											IgnorePublicAcls:      &trueVal,
											RestrictPublicBuckets: &trueVal,
										},
									},
									BucketLevelPermissions: &guard_duty_finding.BucketLevelPermissions{
										AccessControlList: &guard_duty_finding.AccessControlList{
											AllowsPublicReadAccess:  &trueVal,
											AllowsPublicWriteAccess: &trueVal,
										},
										BlockPublicAccess: &guard_duty_finding.BlockPublicAccess{
											BlockPublicAcls:       &trueVal,
											BlockPublicPolicy:     &trueVal,
											IgnorePublicAcls:      &trueVal,
											RestrictPublicBuckets: &trueVal,
										},
										BucketPolicy: &guard_duty_finding.AccessControlList{
											AllowsPublicReadAccess:  &trueVal,
											AllowsPublicWriteAccess: &trueVal,
										},
									},
								},
							},
							Tags: []guard_duty_finding.EcsClusterDetailsItem{{
								Key:   strVal,
								Value: strVal,
							}},
							Type: strVal,
						}},
					},
					SchemaVersion: strVal,
					Service: &guard_duty_finding.Service{
						Action: &guard_duty_finding.Action{
							ActionType: &strVal,
							AwsApiCallAction: &guard_duty_finding.AwsApiCallAction1{
								AffectedResources: &guard_duty_finding.AffectedResources1{
									AWSCloudTrailTrail: &strVal,
									AWSEC2Instance:     &strVal,
									AWSS3Bucket:        &strVal,
								},
								Api:        &strVal,
								CallerType: &strVal,
								ErrorCode:  &strVal,
								RemoteAccountDetails: &guard_duty_finding.RemoteAccountDetails{
									AccountId:  &strVal,
									Affiliated: &trueVal,
								},
								RemoteIpDetails: &guard_duty_finding.RemoteIpDetails1{
									City: &guard_duty_finding.City1{
										CityName: &strVal,
									},
									Country: &guard_duty_finding.Country1{
										CountryName: &strVal,
									},
									GeoLocation: &guard_duty_finding.GeoLocation{
										Lat: &floatVal,
										Lon: &floatVal,
									},
									IpAddressV4: &strVal,
									Organization: &guard_duty_finding.Organization1{
										Asn:    &strVal,
										AsnOrg: &strVal,
										Isp:    &strVal,
										Org:    &strVal,
									},
								},
								ServiceName: &strVal,
							},
							DnsRequestAction: &guard_duty_finding.DnsRequestAction{
								Blocked:  &trueVal,
								Domain:   &strVal,
								Protocol: &strVal,
							},
							KubernetesApiCallAction: &guard_duty_finding.KubernetesApiCallAction{
								Parameters: &strVal,
								RemoteIpDetails: &guard_duty_finding.RemoteIpDetails2{
									City: &guard_duty_finding.City2{
										CityName: &strVal,
									},
									Country: &guard_duty_finding.Country2{
										CountryName: &strVal,
									},
									GeoLocation: &guard_duty_finding.GeoLocation{
										Lat: &floatVal,
										Lon: &floatVal,
									},
									IpAddressV4: &strVal,
									Organization: &guard_duty_finding.Organization2{
										Asn:    &strVal,
										AsnOrg: &strVal,
										Isp:    &strVal,
										Org:    &strVal,
									},
								},
								RequestUri: &strVal,
								SourceIPs:  []string{strVal},
								StatusCode: &floatVal,
								UserAgent:  &strVal,
								Verb:       &strVal,
							},
							NetworkConnectionAction: &guard_duty_finding.NetworkConnectionAction{
								Blocked:             &trueVal,
								ConnectionDirection: &strVal,
								LocalIpDetails: &guard_duty_finding.LocalIpDetails{
									IpAddressV4: &strVal,
								},
								LocalPortDetails: &guard_duty_finding.LocalPortDetails{
									Port:     &floatVal,
									PortName: &strVal,
								},
								Protocol: &strVal,
								RemoteIpDetails: &guard_duty_finding.RemoteIpDetails3{
									City: &guard_duty_finding.City3{
										CityName: &strVal,
									},
									Country: &guard_duty_finding.Country3{
										CountryName: &strVal,
									},
									GeoLocation: &guard_duty_finding.GeoLocation{
										Lat: &floatVal,
										Lon: &floatVal,
									},
									IpAddressV4: &strVal,
									Organization: &guard_duty_finding.Organization3{
										Asn:    &strVal,
										AsnOrg: &strVal,
										Isp:    &strVal,
										Org:    &strVal,
									},
								},
								RemotePortDetails: &guard_duty_finding.RemotePortDetails{
									Port:     &floatVal,
									PortName: &strVal,
								},
							},
							PortProbeAction: &guard_duty_finding.PortProbeAction{
								Blocked: &trueVal,
								PortProbeDetails: []guard_duty_finding.PortProbeActionItem{{
									LocalIpDetails: &guard_duty_finding.LocalIpDetails1{
										IpAddressV4: strVal,
									},
									LocalPortDetails: &guard_duty_finding.LocalPortDetails1{
										Port:     floatVal,
										PortName: strVal,
									},
									RemoteIpDetails: &guard_duty_finding.RemoteIpDetails4{
										City: &guard_duty_finding.City4{
											CityName: strVal,
										},
										Country: &guard_duty_finding.Country4{
											CountryName: strVal,
										},
										GeoLocation: &guard_duty_finding.GeoLocation1{
											Lat: floatVal,
											Lon: floatVal,
										},
										IpAddressV4: strVal,
										Organization: &guard_duty_finding.Organization4{
											Asn:    strVal,
											AsnOrg: strVal,
											Isp:    strVal,
											Org:    strVal,
										},
									},
								}},
							},
						},
						AdditionalInfo: &guard_duty_finding.AdditionalInfo{
							AdditionalScannedPorts: []guard_duty_finding.AdditionalScannedPortsItems{anyVal},
							Anomalies: &guard_duty_finding.Anomalies{
								AnomalousAPIs: &strVal,
							},
							ApiCalls: []guard_duty_finding.AdditionalInfoItem{{
								Count:     floatVal,
								FirstSeen: floatVal,
								LastSeen:  floatVal,
								Name:      strVal,
							}},
							Domain:    &strVal,
							InBytes:   &strVal,
							LocalPort: &strVal,
							NewPolicy: &guard_duty_finding.NewPolicy{
								AllowUsersToChangePassword: &strVal,
								HardExpiry:                 &strVal,
								MaxPasswordAge:             &strVal,
								MinimumPasswordLength:      &strVal,
								PasswordReusePrevention:    &strVal,
								RequireLowercaseCharacters: &strVal,
								RequireNumbers:             &strVal,
								RequireSymbols:             &strVal,
								RequireUppercaseCharacters: &strVal,
							},
							OldPolicy: &guard_duty_finding.OldPolicy{
								AllowUsersToChangePassword: &strVal,
								HardExpiry:                 &strVal,
								MaxPasswordAge:             &strVal,
								MinimumPasswordLength:      &strVal,
								PasswordReusePrevention:    &strVal,
								RequireLowercaseCharacters: &strVal,
								RequireNumbers:             &strVal,
								RequireSymbols:             &strVal,
								RequireUppercaseCharacters: &strVal,
							},
							OutBytes:           &strVal,
							PortsScannedSample: []float64{floatVal},
							ProfiledBehavior: &guard_duty_finding.ProfiledBehavior{
								FrequentProfiledAPIsAccountProfiling:                      &strVal,
								FrequentProfiledAPIsUserIdentityProfiling:                 &strVal,
								FrequentProfiledASNsAccountProfiling:                      &strVal,
								FrequentProfiledASNsBucketProfiling:                       &strVal,
								FrequentProfiledASNsUserIdentityProfiling:                 &strVal,
								FrequentProfiledBucketsAccountProfiling:                   &strVal,
								FrequentProfiledBucketsUserIdentityProfiling:              &strVal,
								FrequentProfiledUserAgentsAccountProfiling:                &strVal,
								FrequentProfiledUserAgentsUserIdentityProfiling:           &strVal,
								FrequentProfiledUserNamesAccountProfiling:                 &strVal,
								FrequentProfiledUserNamesBucketProfiling:                  &strVal,
								FrequentProfiledUserTypesAccountProfiling:                 &strVal,
								InfrequentProfiledAPIsAccountProfiling:                    &strVal,
								InfrequentProfiledAPIsUserIdentityProfiling:               &strVal,
								InfrequentProfiledASNsAccountProfiling:                    &strVal,
								InfrequentProfiledASNsBucketProfiling:                     &strVal,
								InfrequentProfiledASNsUserIdentityProfiling:               &strVal,
								InfrequentProfiledBucketsAccountProfiling:                 &strVal,
								InfrequentProfiledBucketsUserIdentityProfiling:            &strVal,
								InfrequentProfiledUserAgentsAccountProfiling:              &strVal,
								InfrequentProfiledUserAgentsUserIdentityProfiling:         &strVal,
								InfrequentProfiledUserNamesAccountProfiling:               &strVal,
								InfrequentProfiledUserNamesBucketProfiling:                &strVal,
								InfrequentProfiledUserTypesAccountProfiling:               &strVal,
								NumberOfHistoricalDailyAvgAPIsBucketProfiling:             &strVal,
								NumberOfHistoricalDailyAvgAPIsBucketUserIdentityProfiling: &strVal,
								NumberOfHistoricalDailyAvgAPIsUserIdentityProfiling:       &strVal,
								NumberOfHistoricalDailyMaxAPIsBucketProfiling:             &strVal,
								NumberOfHistoricalDailyMaxAPIsBucketUserIdentityProfiling: &strVal,
								NumberOfHistoricalDailyMaxAPIsUserIdentityProfiling:       &strVal,
								RareProfiledAPIsAccountProfiling:                          &strVal,
								RareProfiledAPIsUserIdentityProfiling:                     &strVal,
								RareProfiledASNsAccountProfiling:                          &strVal,
								RareProfiledASNsBucketProfiling:                           &strVal,
								RareProfiledASNsUserIdentityProfiling:                     &strVal,
								RareProfiledBucketsAccountProfiling:                       &strVal,
								RareProfiledBucketsUserIdentityProfiling:                  &strVal,
								RareProfiledUserAgentsAccountProfiling:                    &strVal,
								RareProfiledUserAgentsUserIdentityProfiling:               &strVal,
								RareProfiledUserNamesAccountProfiling:                     &strVal,
								RareProfiledUserNamesBucketProfiling:                      &strVal,
								RareProfiledUserTypesAccountProfiling:                     &strVal,
							},
							RecentCredentials: []guard_duty_finding.AdditionalInfoItem1{{
								AccessKeyId: strVal,
								IpAddressV4: strVal,
								PrincipalId: strVal,
							}},
							Sample:         trueVal,
							ScannedPort:    &floatVal,
							ThreatListName: &strVal,
							ThreatName:     &strVal,
							Type:           strVal,
							Unusual:        anyVal,
							UnusualBehavior: &guard_duty_finding.UnusualBehavior{
								IsUnusualUserIdentity:                              &strVal,
								NumberOfPast24HoursAPIsBucketProfiling:             &strVal,
								NumberOfPast24HoursAPIsBucketUserIdentityProfiling: &strVal,
								NumberOfPast24HoursAPIsUserIdentityProfiling:       &strVal,
								UnusualAPIsAccountProfiling:                        &strVal,
								UnusualAPIsUserIdentityProfiling:                   &strVal,
								UnusualASNsAccountProfiling:                        &strVal,
								UnusualASNsBucketProfiling:                         &strVal,
								UnusualASNsUserIdentityProfiling:                   &strVal,
								UnusualBucketsAccountProfiling:                     &strVal,
								UnusualBucketsUserIdentityProfiling:                &strVal,
								UnusualUserAgentsAccountProfiling:                  &strVal,
								UnusualUserAgentsUserIdentityProfiling:             &strVal,
								UnusualUserNamesAccountProfiling:                   &strVal,
								UnusualUserNamesBucketProfiling:                    &strVal,
								UnusualUserTypesAccountProfiling:                   &strVal,
							},
							UnusualProtocol: &strVal,
							UserAgent: &guard_duty_finding.UserAgent{
								FullUserAgent:     &strVal,
								UserAgentCategory: &strVal,
							},
							Value: strVal,
						},
						Archived: trueVal,
						AwsApiCallAction: &guard_duty_finding.AwsApiCallAction{
							AffectedResources: anyVal,
							Api:               &strVal,
							CallerType:        &strVal,
							ErrorCode:         &strVal,
							RemoteIpDetails: &guard_duty_finding.RemoteIpDetails{
								City: &guard_duty_finding.City{
									CityName: &strVal,
								},
								Country: &guard_duty_finding.Country{
									CountryName: &strVal,
								},
								GeoLocation: &guard_duty_finding.GeoLocation{
									Lat: &floatVal,
									Lon: &floatVal,
								},
								IpAddressV4: &strVal,
								Organization: &guard_duty_finding.Organization{
									Asn:    &strVal,
									AsnOrg: &strVal,
									Isp:    &strVal,
									Org:    &strVal,
								},
							},
							ServiceName: &strVal,
						},
						Count:      floatVal,
						DetectorId: strVal,
						EbsVolumeScanDetails: &guard_duty_finding.EbsVolumeScanDetails{
							ScanCompletedAt: &floatVal,
							ScanDetections: &guard_duty_finding.ScanDetections{
								HighestSeverityThreatDetails: &guard_duty_finding.HighestSeverityThreatDetails{
									Count:      &floatVal,
									Severity:   &strVal,
									ThreatName: &strVal,
								},
								ScannedItemCount: &guard_duty_finding.ScannedItemCount{
									Files:   &floatVal,
									TotalGb: &floatVal,
									Volumes: &floatVal,
								},
								ThreatDetectedByName: &guard_duty_finding.ThreatDetectedByName{
									ItemCount: &floatVal,
									Shortened: &trueVal,
									ThreatNames: []guard_duty_finding.ThreatDetectedByNameItem{{
										FilePaths: []guard_duty_finding.ThreatDetectedByNameItemItem{{
											FileName:  strVal,
											FilePath:  strVal,
											Hash:      strVal,
											VolumeArn: strVal,
										}},
										ItemCount: floatVal,
										Name:      strVal,
										Severity:  strVal,
									}},
									UniqueThreatNameCount: &floatVal,
								},
								ThreatsDetectedItemCount: &guard_duty_finding.ThreatsDetectedItemCount{
									Files: &floatVal,
								},
							},
							ScanId:           &strVal,
							ScanStartedAt:    &floatVal,
							Sources:          []string{strVal},
							TriggerFindingId: &strVal,
						},
						EventFirstSeen: timeVal,
						EventLastSeen:  timeVal,
						Evidence: &guard_duty_finding.Evidence{
							ThreatIntelligenceDetails: []guard_duty_finding.EvidenceItem{{
								ThreatListName: strVal,
								ThreatNames:    []string{strVal},
							}},
						},
						FeatureName:  &strVal,
						ResourceRole: &strVal,
						ServiceName:  strVal,
					},
					Severity:  floatVal,
					Title:     strVal,
					Type:      strVal,
					UpdatedAt: timeVal,
				},
				DetailType: strVal,
				Id:         strVal,
				Region:     strVal,
				Resources:  []guard_duty_finding.ResourcesItems{anyVal},
				Source:     strVal,
				Time:       timeVal,
				Version:    strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.Root{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"account"`, strVal, "Account")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("detail")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"detail-type"`, strVal, "DetailType")
				requireJmesMatch(t, jsearch, `"id"`, strVal, "Id")
				requireJmesMatch(t, jsearch, `"region"`, strVal, "Region")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("resources")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"source"`, strVal, "Source")
				requireJmesMatch(t, jsearch, `"time"`, string(mustRet(timeVal.MarshalText())), "Time")
				requireJmesMatch(t, jsearch, `"version"`, strVal, "Version")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, guard_duty_finding.Root{Account: strVal}.Account)
				require.NotNil(t, genStruct.Detail) // Lazily Tested: guard_duty_finding.Root.Detail == *GuardDutyFinding
				require.Equal(t, strVal, guard_duty_finding.Root{DetailType: strVal}.DetailType)
				require.Equal(t, strVal, guard_duty_finding.Root{Id: strVal}.Id)
				require.Equal(t, strVal, guard_duty_finding.Root{Region: strVal}.Region)
				require.NotNil(t, genStruct.Resources) // Lazily Tested: guard_duty_finding.Root.Resources == []ResourcesItems
				require.Equal(t, strVal, guard_duty_finding.Root{Source: strVal}.Source)
				require.Equal(t, timeVal, guard_duty_finding.Root{Time: timeVal}.Time)
				require.Equal(t, strVal, guard_duty_finding.Root{Version: strVal}.Version)
			})
		})

		t.Run("ScanDetections", func(t *testing.T) {
			genStruct := &guard_duty_finding.ScanDetections{
				HighestSeverityThreatDetails: &guard_duty_finding.HighestSeverityThreatDetails{
					Count:      &floatVal,
					Severity:   &strVal,
					ThreatName: &strVal,
				},
				ScannedItemCount: &guard_duty_finding.ScannedItemCount{
					Files:   &floatVal,
					TotalGb: &floatVal,
					Volumes: &floatVal,
				},
				ThreatDetectedByName: &guard_duty_finding.ThreatDetectedByName{
					ItemCount: &floatVal,
					Shortened: &trueVal,
					ThreatNames: []guard_duty_finding.ThreatDetectedByNameItem{{
						FilePaths: []guard_duty_finding.ThreatDetectedByNameItemItem{{
							FileName:  strVal,
							FilePath:  strVal,
							Hash:      strVal,
							VolumeArn: strVal,
						}},
						ItemCount: floatVal,
						Name:      strVal,
						Severity:  strVal,
					}},
					UniqueThreatNameCount: &floatVal,
				},
				ThreatsDetectedItemCount: &guard_duty_finding.ThreatsDetectedItemCount{
					Files: &floatVal,
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.ScanDetections{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("highestSeverityThreatDetails")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("scannedItemCount")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("threatDetectedByName")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("threatsDetectedItemCount")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.HighestSeverityThreatDetails) // Lazily Tested: guard_duty_finding.ScanDetections.HighestSeverityThreatDetails == *HighestSeverityThreatDetails
				require.NotNil(t, genStruct.ScannedItemCount)             // Lazily Tested: guard_duty_finding.ScanDetections.ScannedItemCount == *ScannedItemCount
				require.NotNil(t, genStruct.ThreatDetectedByName)         // Lazily Tested: guard_duty_finding.ScanDetections.ThreatDetectedByName == *ThreatDetectedByName
				require.NotNil(t, genStruct.ThreatsDetectedItemCount)     // Lazily Tested: guard_duty_finding.ScanDetections.ThreatsDetectedItemCount == *ThreatsDetectedItemCount
			})
		})

		t.Run("ScannedItemCount", func(t *testing.T) {
			genStruct := &guard_duty_finding.ScannedItemCount{
				Files:   &floatVal,
				TotalGb: &floatVal,
				Volumes: &floatVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.ScannedItemCount{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"files"`, floatVal, "Files")
				requireJmesMatch(t, jsearch, `"totalGb"`, floatVal, "TotalGb")
				requireJmesMatch(t, jsearch, `"volumes"`, floatVal, "Volumes")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, floatVal, *guard_duty_finding.ScannedItemCount{Files: &floatVal}.Files)
				require.Equal(t, floatVal, *guard_duty_finding.ScannedItemCount{TotalGb: &floatVal}.TotalGb)
				require.Equal(t, floatVal, *guard_duty_finding.ScannedItemCount{Volumes: &floatVal}.Volumes)
			})
		})

		t.Run("SecurityContext", func(t *testing.T) {
			genStruct := &guard_duty_finding.SecurityContext{
				Privileged: trueVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.SecurityContext{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"privileged"`, trueVal, "Privileged")

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.Privileged) // Lazily Tested: guard_duty_finding.SecurityContext.Privileged == bool
			})
		})

		t.Run("Service", func(t *testing.T) {
			genStruct := &guard_duty_finding.Service{
				Action: &guard_duty_finding.Action{
					ActionType: &strVal,
					AwsApiCallAction: &guard_duty_finding.AwsApiCallAction1{
						AffectedResources: &guard_duty_finding.AffectedResources1{
							AWSCloudTrailTrail: &strVal,
							AWSEC2Instance:     &strVal,
							AWSS3Bucket:        &strVal,
						},
						Api:        &strVal,
						CallerType: &strVal,
						ErrorCode:  &strVal,
						RemoteAccountDetails: &guard_duty_finding.RemoteAccountDetails{
							AccountId:  &strVal,
							Affiliated: &trueVal,
						},
						RemoteIpDetails: &guard_duty_finding.RemoteIpDetails1{
							City: &guard_duty_finding.City1{
								CityName: &strVal,
							},
							Country: &guard_duty_finding.Country1{
								CountryName: &strVal,
							},
							GeoLocation: &guard_duty_finding.GeoLocation{
								Lat: &floatVal,
								Lon: &floatVal,
							},
							IpAddressV4: &strVal,
							Organization: &guard_duty_finding.Organization1{
								Asn:    &strVal,
								AsnOrg: &strVal,
								Isp:    &strVal,
								Org:    &strVal,
							},
						},
						ServiceName: &strVal,
					},
					DnsRequestAction: &guard_duty_finding.DnsRequestAction{
						Blocked:  &trueVal,
						Domain:   &strVal,
						Protocol: &strVal,
					},
					KubernetesApiCallAction: &guard_duty_finding.KubernetesApiCallAction{
						Parameters: &strVal,
						RemoteIpDetails: &guard_duty_finding.RemoteIpDetails2{
							City: &guard_duty_finding.City2{
								CityName: &strVal,
							},
							Country: &guard_duty_finding.Country2{
								CountryName: &strVal,
							},
							GeoLocation: &guard_duty_finding.GeoLocation{
								Lat: &floatVal,
								Lon: &floatVal,
							},
							IpAddressV4: &strVal,
							Organization: &guard_duty_finding.Organization2{
								Asn:    &strVal,
								AsnOrg: &strVal,
								Isp:    &strVal,
								Org:    &strVal,
							},
						},
						RequestUri: &strVal,
						SourceIPs:  []string{strVal},
						StatusCode: &floatVal,
						UserAgent:  &strVal,
						Verb:       &strVal,
					},
					NetworkConnectionAction: &guard_duty_finding.NetworkConnectionAction{
						Blocked:             &trueVal,
						ConnectionDirection: &strVal,
						LocalIpDetails: &guard_duty_finding.LocalIpDetails{
							IpAddressV4: &strVal,
						},
						LocalPortDetails: &guard_duty_finding.LocalPortDetails{
							Port:     &floatVal,
							PortName: &strVal,
						},
						Protocol: &strVal,
						RemoteIpDetails: &guard_duty_finding.RemoteIpDetails3{
							City: &guard_duty_finding.City3{
								CityName: &strVal,
							},
							Country: &guard_duty_finding.Country3{
								CountryName: &strVal,
							},
							GeoLocation: &guard_duty_finding.GeoLocation{
								Lat: &floatVal,
								Lon: &floatVal,
							},
							IpAddressV4: &strVal,
							Organization: &guard_duty_finding.Organization3{
								Asn:    &strVal,
								AsnOrg: &strVal,
								Isp:    &strVal,
								Org:    &strVal,
							},
						},
						RemotePortDetails: &guard_duty_finding.RemotePortDetails{
							Port:     &floatVal,
							PortName: &strVal,
						},
					},
					PortProbeAction: &guard_duty_finding.PortProbeAction{
						Blocked: &trueVal,
						PortProbeDetails: []guard_duty_finding.PortProbeActionItem{{
							LocalIpDetails: &guard_duty_finding.LocalIpDetails1{
								IpAddressV4: strVal,
							},
							LocalPortDetails: &guard_duty_finding.LocalPortDetails1{
								Port:     floatVal,
								PortName: strVal,
							},
							RemoteIpDetails: &guard_duty_finding.RemoteIpDetails4{
								City: &guard_duty_finding.City4{
									CityName: strVal,
								},
								Country: &guard_duty_finding.Country4{
									CountryName: strVal,
								},
								GeoLocation: &guard_duty_finding.GeoLocation1{
									Lat: floatVal,
									Lon: floatVal,
								},
								IpAddressV4: strVal,
								Organization: &guard_duty_finding.Organization4{
									Asn:    strVal,
									AsnOrg: strVal,
									Isp:    strVal,
									Org:    strVal,
								},
							},
						}},
					},
				},
				AdditionalInfo: &guard_duty_finding.AdditionalInfo{
					AdditionalScannedPorts: []guard_duty_finding.AdditionalScannedPortsItems{anyVal},
					Anomalies: &guard_duty_finding.Anomalies{
						AnomalousAPIs: &strVal,
					},
					ApiCalls: []guard_duty_finding.AdditionalInfoItem{{
						Count:     floatVal,
						FirstSeen: floatVal,
						LastSeen:  floatVal,
						Name:      strVal,
					}},
					Domain:    &strVal,
					InBytes:   &strVal,
					LocalPort: &strVal,
					NewPolicy: &guard_duty_finding.NewPolicy{
						AllowUsersToChangePassword: &strVal,
						HardExpiry:                 &strVal,
						MaxPasswordAge:             &strVal,
						MinimumPasswordLength:      &strVal,
						PasswordReusePrevention:    &strVal,
						RequireLowercaseCharacters: &strVal,
						RequireNumbers:             &strVal,
						RequireSymbols:             &strVal,
						RequireUppercaseCharacters: &strVal,
					},
					OldPolicy: &guard_duty_finding.OldPolicy{
						AllowUsersToChangePassword: &strVal,
						HardExpiry:                 &strVal,
						MaxPasswordAge:             &strVal,
						MinimumPasswordLength:      &strVal,
						PasswordReusePrevention:    &strVal,
						RequireLowercaseCharacters: &strVal,
						RequireNumbers:             &strVal,
						RequireSymbols:             &strVal,
						RequireUppercaseCharacters: &strVal,
					},
					OutBytes:           &strVal,
					PortsScannedSample: []float64{floatVal},
					ProfiledBehavior: &guard_duty_finding.ProfiledBehavior{
						FrequentProfiledAPIsAccountProfiling:                      &strVal,
						FrequentProfiledAPIsUserIdentityProfiling:                 &strVal,
						FrequentProfiledASNsAccountProfiling:                      &strVal,
						FrequentProfiledASNsBucketProfiling:                       &strVal,
						FrequentProfiledASNsUserIdentityProfiling:                 &strVal,
						FrequentProfiledBucketsAccountProfiling:                   &strVal,
						FrequentProfiledBucketsUserIdentityProfiling:              &strVal,
						FrequentProfiledUserAgentsAccountProfiling:                &strVal,
						FrequentProfiledUserAgentsUserIdentityProfiling:           &strVal,
						FrequentProfiledUserNamesAccountProfiling:                 &strVal,
						FrequentProfiledUserNamesBucketProfiling:                  &strVal,
						FrequentProfiledUserTypesAccountProfiling:                 &strVal,
						InfrequentProfiledAPIsAccountProfiling:                    &strVal,
						InfrequentProfiledAPIsUserIdentityProfiling:               &strVal,
						InfrequentProfiledASNsAccountProfiling:                    &strVal,
						InfrequentProfiledASNsBucketProfiling:                     &strVal,
						InfrequentProfiledASNsUserIdentityProfiling:               &strVal,
						InfrequentProfiledBucketsAccountProfiling:                 &strVal,
						InfrequentProfiledBucketsUserIdentityProfiling:            &strVal,
						InfrequentProfiledUserAgentsAccountProfiling:              &strVal,
						InfrequentProfiledUserAgentsUserIdentityProfiling:         &strVal,
						InfrequentProfiledUserNamesAccountProfiling:               &strVal,
						InfrequentProfiledUserNamesBucketProfiling:                &strVal,
						InfrequentProfiledUserTypesAccountProfiling:               &strVal,
						NumberOfHistoricalDailyAvgAPIsBucketProfiling:             &strVal,
						NumberOfHistoricalDailyAvgAPIsBucketUserIdentityProfiling: &strVal,
						NumberOfHistoricalDailyAvgAPIsUserIdentityProfiling:       &strVal,
						NumberOfHistoricalDailyMaxAPIsBucketProfiling:             &strVal,
						NumberOfHistoricalDailyMaxAPIsBucketUserIdentityProfiling: &strVal,
						NumberOfHistoricalDailyMaxAPIsUserIdentityProfiling:       &strVal,
						RareProfiledAPIsAccountProfiling:                          &strVal,
						RareProfiledAPIsUserIdentityProfiling:                     &strVal,
						RareProfiledASNsAccountProfiling:                          &strVal,
						RareProfiledASNsBucketProfiling:                           &strVal,
						RareProfiledASNsUserIdentityProfiling:                     &strVal,
						RareProfiledBucketsAccountProfiling:                       &strVal,
						RareProfiledBucketsUserIdentityProfiling:                  &strVal,
						RareProfiledUserAgentsAccountProfiling:                    &strVal,
						RareProfiledUserAgentsUserIdentityProfiling:               &strVal,
						RareProfiledUserNamesAccountProfiling:                     &strVal,
						RareProfiledUserNamesBucketProfiling:                      &strVal,
						RareProfiledUserTypesAccountProfiling:                     &strVal,
					},
					RecentCredentials: []guard_duty_finding.AdditionalInfoItem1{{
						AccessKeyId: strVal,
						IpAddressV4: strVal,
						PrincipalId: strVal,
					}},
					Sample:         trueVal,
					ScannedPort:    &floatVal,
					ThreatListName: &strVal,
					ThreatName:     &strVal,
					Type:           strVal,
					Unusual:        anyVal,
					UnusualBehavior: &guard_duty_finding.UnusualBehavior{
						IsUnusualUserIdentity:                              &strVal,
						NumberOfPast24HoursAPIsBucketProfiling:             &strVal,
						NumberOfPast24HoursAPIsBucketUserIdentityProfiling: &strVal,
						NumberOfPast24HoursAPIsUserIdentityProfiling:       &strVal,
						UnusualAPIsAccountProfiling:                        &strVal,
						UnusualAPIsUserIdentityProfiling:                   &strVal,
						UnusualASNsAccountProfiling:                        &strVal,
						UnusualASNsBucketProfiling:                         &strVal,
						UnusualASNsUserIdentityProfiling:                   &strVal,
						UnusualBucketsAccountProfiling:                     &strVal,
						UnusualBucketsUserIdentityProfiling:                &strVal,
						UnusualUserAgentsAccountProfiling:                  &strVal,
						UnusualUserAgentsUserIdentityProfiling:             &strVal,
						UnusualUserNamesAccountProfiling:                   &strVal,
						UnusualUserNamesBucketProfiling:                    &strVal,
						UnusualUserTypesAccountProfiling:                   &strVal,
					},
					UnusualProtocol: &strVal,
					UserAgent: &guard_duty_finding.UserAgent{
						FullUserAgent:     &strVal,
						UserAgentCategory: &strVal,
					},
					Value: strVal,
				},
				Archived: trueVal,
				AwsApiCallAction: &guard_duty_finding.AwsApiCallAction{
					AffectedResources: anyVal,
					Api:               &strVal,
					CallerType:        &strVal,
					ErrorCode:         &strVal,
					RemoteIpDetails: &guard_duty_finding.RemoteIpDetails{
						City: &guard_duty_finding.City{
							CityName: &strVal,
						},
						Country: &guard_duty_finding.Country{
							CountryName: &strVal,
						},
						GeoLocation: &guard_duty_finding.GeoLocation{
							Lat: &floatVal,
							Lon: &floatVal,
						},
						IpAddressV4: &strVal,
						Organization: &guard_duty_finding.Organization{
							Asn:    &strVal,
							AsnOrg: &strVal,
							Isp:    &strVal,
							Org:    &strVal,
						},
					},
					ServiceName: &strVal,
				},
				Count:      floatVal,
				DetectorId: strVal,
				EbsVolumeScanDetails: &guard_duty_finding.EbsVolumeScanDetails{
					ScanCompletedAt: &floatVal,
					ScanDetections: &guard_duty_finding.ScanDetections{
						HighestSeverityThreatDetails: &guard_duty_finding.HighestSeverityThreatDetails{
							Count:      &floatVal,
							Severity:   &strVal,
							ThreatName: &strVal,
						},
						ScannedItemCount: &guard_duty_finding.ScannedItemCount{
							Files:   &floatVal,
							TotalGb: &floatVal,
							Volumes: &floatVal,
						},
						ThreatDetectedByName: &guard_duty_finding.ThreatDetectedByName{
							ItemCount: &floatVal,
							Shortened: &trueVal,
							ThreatNames: []guard_duty_finding.ThreatDetectedByNameItem{{
								FilePaths: []guard_duty_finding.ThreatDetectedByNameItemItem{{
									FileName:  strVal,
									FilePath:  strVal,
									Hash:      strVal,
									VolumeArn: strVal,
								}},
								ItemCount: floatVal,
								Name:      strVal,
								Severity:  strVal,
							}},
							UniqueThreatNameCount: &floatVal,
						},
						ThreatsDetectedItemCount: &guard_duty_finding.ThreatsDetectedItemCount{
							Files: &floatVal,
						},
					},
					ScanId:           &strVal,
					ScanStartedAt:    &floatVal,
					Sources:          []string{strVal},
					TriggerFindingId: &strVal,
				},
				EventFirstSeen: timeVal,
				EventLastSeen:  timeVal,
				Evidence: &guard_duty_finding.Evidence{
					ThreatIntelligenceDetails: []guard_duty_finding.EvidenceItem{{
						ThreatListName: strVal,
						ThreatNames:    []string{strVal},
					}},
				},
				FeatureName:  &strVal,
				ResourceRole: &strVal,
				ServiceName:  strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.Service{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("action")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("additionalInfo")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"archived"`, trueVal, "Archived")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("awsApiCallAction")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"count"`, floatVal, "Count")
				requireJmesMatch(t, jsearch, `"detectorId"`, strVal, "DetectorId")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("ebsVolumeScanDetails")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"eventFirstSeen"`, string(mustRet(timeVal.MarshalText())), "EventFirstSeen")
				requireJmesMatch(t, jsearch, `"eventLastSeen"`, string(mustRet(timeVal.MarshalText())), "EventLastSeen")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("evidence")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"featureName"`, strVal, "FeatureName")
				requireJmesMatch(t, jsearch, `"resourceRole"`, strVal, "ResourceRole")
				requireJmesMatch(t, jsearch, `"serviceName"`, strVal, "ServiceName")

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.Action)           // Lazily Tested: guard_duty_finding.Service.Action == *Action
				require.NotNil(t, genStruct.AdditionalInfo)   // Lazily Tested: guard_duty_finding.Service.AdditionalInfo == *AdditionalInfo
				require.NotNil(t, genStruct.Archived)         // Lazily Tested: guard_duty_finding.Service.Archived == bool
				require.NotNil(t, genStruct.AwsApiCallAction) // Lazily Tested: guard_duty_finding.Service.AwsApiCallAction == *AwsApiCallAction
				require.Equal(t, floatVal, guard_duty_finding.Service{Count: floatVal}.Count)
				require.Equal(t, strVal, guard_duty_finding.Service{DetectorId: strVal}.DetectorId)
				require.NotNil(t, genStruct.EbsVolumeScanDetails) // Lazily Tested: guard_duty_finding.Service.EbsVolumeScanDetails == *EbsVolumeScanDetails
				require.Equal(t, timeVal, guard_duty_finding.Service{EventFirstSeen: timeVal}.EventFirstSeen)
				require.Equal(t, timeVal, guard_duty_finding.Service{EventLastSeen: timeVal}.EventLastSeen)
				require.NotNil(t, genStruct.Evidence) // Lazily Tested: guard_duty_finding.Service.Evidence == *Evidence
				require.Equal(t, strVal, *guard_duty_finding.Service{FeatureName: &strVal}.FeatureName)
				require.Equal(t, strVal, *guard_duty_finding.Service{ResourceRole: &strVal}.ResourceRole)
				require.Equal(t, strVal, guard_duty_finding.Service{ServiceName: strVal}.ServiceName)
			})
		})

		t.Run("TaskDetails", func(t *testing.T) {
			genStruct := &guard_duty_finding.TaskDetails{
				Arn: &strVal,
				Containers: []guard_duty_finding.TaskDetailsItem{{
					Image: strVal,
					Name:  strVal,
				}},
				CreatedAt:     &floatVal,
				DefinitionArn: &strVal,
				StartedAt:     &floatVal,
				StartedBy:     &strVal,
				Version:       &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.TaskDetails{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"arn"`, strVal, "Arn")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("containers")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"createdAt"`, floatVal, "CreatedAt")
				requireJmesMatch(t, jsearch, `"definitionArn"`, strVal, "DefinitionArn")
				requireJmesMatch(t, jsearch, `"startedAt"`, floatVal, "StartedAt")
				requireJmesMatch(t, jsearch, `"startedBy"`, strVal, "StartedBy")
				requireJmesMatch(t, jsearch, `"version"`, strVal, "Version")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.TaskDetails{Arn: &strVal}.Arn)
				require.NotNil(t, genStruct.Containers) // Lazily Tested: guard_duty_finding.TaskDetails.Containers == []TaskDetailsItem
				require.Equal(t, floatVal, *guard_duty_finding.TaskDetails{CreatedAt: &floatVal}.CreatedAt)
				require.Equal(t, strVal, *guard_duty_finding.TaskDetails{DefinitionArn: &strVal}.DefinitionArn)
				require.Equal(t, floatVal, *guard_duty_finding.TaskDetails{StartedAt: &floatVal}.StartedAt)
				require.Equal(t, strVal, *guard_duty_finding.TaskDetails{StartedBy: &strVal}.StartedBy)
				require.Equal(t, strVal, *guard_duty_finding.TaskDetails{Version: &strVal}.Version)
			})
		})

		t.Run("TaskDetailsItem", func(t *testing.T) {
			genStruct := &guard_duty_finding.TaskDetailsItem{
				Image: strVal,
				Name:  strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.TaskDetailsItem{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"image"`, strVal, "Image")
				requireJmesMatch(t, jsearch, `"name"`, strVal, "Name")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, guard_duty_finding.TaskDetailsItem{Image: strVal}.Image)
				require.Equal(t, strVal, guard_duty_finding.TaskDetailsItem{Name: strVal}.Name)
			})
		})

		t.Run("ThreatDetectedByName", func(t *testing.T) {
			genStruct := &guard_duty_finding.ThreatDetectedByName{
				ItemCount: &floatVal,
				Shortened: &trueVal,
				ThreatNames: []guard_duty_finding.ThreatDetectedByNameItem{{
					FilePaths: []guard_duty_finding.ThreatDetectedByNameItemItem{{
						FileName:  strVal,
						FilePath:  strVal,
						Hash:      strVal,
						VolumeArn: strVal,
					}},
					ItemCount: floatVal,
					Name:      strVal,
					Severity:  strVal,
				}},
				UniqueThreatNameCount: &floatVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.ThreatDetectedByName{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"itemCount"`, floatVal, "ItemCount")
				requireJmesMatch(t, jsearch, `"shortened"`, trueVal, "Shortened")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("threatNames")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"uniqueThreatNameCount"`, floatVal, "UniqueThreatNameCount")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, floatVal, *guard_duty_finding.ThreatDetectedByName{ItemCount: &floatVal}.ItemCount)
				require.NotNil(t, genStruct.Shortened)   // Lazily Tested: guard_duty_finding.ThreatDetectedByName.Shortened == *bool
				require.NotNil(t, genStruct.ThreatNames) // Lazily Tested: guard_duty_finding.ThreatDetectedByName.ThreatNames == []ThreatDetectedByNameItem
				require.Equal(t, floatVal, *guard_duty_finding.ThreatDetectedByName{UniqueThreatNameCount: &floatVal}.UniqueThreatNameCount)
			})
		})

		t.Run("ThreatDetectedByNameItem", func(t *testing.T) {
			genStruct := &guard_duty_finding.ThreatDetectedByNameItem{
				FilePaths: []guard_duty_finding.ThreatDetectedByNameItemItem{{
					FileName:  strVal,
					FilePath:  strVal,
					Hash:      strVal,
					VolumeArn: strVal,
				}},
				ItemCount: floatVal,
				Name:      strVal,
				Severity:  strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.ThreatDetectedByNameItem{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("filePaths")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"itemCount"`, floatVal, "ItemCount")
				requireJmesMatch(t, jsearch, `"name"`, strVal, "Name")
				requireJmesMatch(t, jsearch, `"severity"`, strVal, "Severity")

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.FilePaths) // Lazily Tested: guard_duty_finding.ThreatDetectedByNameItem.FilePaths == []ThreatDetectedByNameItemItem
				require.Equal(t, floatVal, guard_duty_finding.ThreatDetectedByNameItem{ItemCount: floatVal}.ItemCount)
				require.Equal(t, strVal, guard_duty_finding.ThreatDetectedByNameItem{Name: strVal}.Name)
				require.Equal(t, strVal, guard_duty_finding.ThreatDetectedByNameItem{Severity: strVal}.Severity)
			})
		})

		t.Run("ThreatDetectedByNameItemItem", func(t *testing.T) {
			genStruct := &guard_duty_finding.ThreatDetectedByNameItemItem{
				FileName:  strVal,
				FilePath:  strVal,
				Hash:      strVal,
				VolumeArn: strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.ThreatDetectedByNameItemItem{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"fileName"`, strVal, "FileName")
				requireJmesMatch(t, jsearch, `"filePath"`, strVal, "FilePath")
				requireJmesMatch(t, jsearch, `"hash"`, strVal, "Hash")
				requireJmesMatch(t, jsearch, `"volumeArn"`, strVal, "VolumeArn")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, guard_duty_finding.ThreatDetectedByNameItemItem{FileName: strVal}.FileName)
				require.Equal(t, strVal, guard_duty_finding.ThreatDetectedByNameItemItem{FilePath: strVal}.FilePath)
				require.Equal(t, strVal, guard_duty_finding.ThreatDetectedByNameItemItem{Hash: strVal}.Hash)
				require.Equal(t, strVal, guard_duty_finding.ThreatDetectedByNameItemItem{VolumeArn: strVal}.VolumeArn)
			})
		})

		t.Run("ThreatsDetectedItemCount", func(t *testing.T) {
			genStruct := &guard_duty_finding.ThreatsDetectedItemCount{
				Files: &floatVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.ThreatsDetectedItemCount{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"files"`, floatVal, "Files")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, floatVal, *guard_duty_finding.ThreatsDetectedItemCount{Files: &floatVal}.Files)
			})
		})

		t.Run("UnusualBehavior", func(t *testing.T) {
			genStruct := &guard_duty_finding.UnusualBehavior{
				IsUnusualUserIdentity:                              &strVal,
				NumberOfPast24HoursAPIsBucketProfiling:             &strVal,
				NumberOfPast24HoursAPIsBucketUserIdentityProfiling: &strVal,
				NumberOfPast24HoursAPIsUserIdentityProfiling:       &strVal,
				UnusualAPIsAccountProfiling:                        &strVal,
				UnusualAPIsUserIdentityProfiling:                   &strVal,
				UnusualASNsAccountProfiling:                        &strVal,
				UnusualASNsBucketProfiling:                         &strVal,
				UnusualASNsUserIdentityProfiling:                   &strVal,
				UnusualBucketsAccountProfiling:                     &strVal,
				UnusualBucketsUserIdentityProfiling:                &strVal,
				UnusualUserAgentsAccountProfiling:                  &strVal,
				UnusualUserAgentsUserIdentityProfiling:             &strVal,
				UnusualUserNamesAccountProfiling:                   &strVal,
				UnusualUserNamesBucketProfiling:                    &strVal,
				UnusualUserTypesAccountProfiling:                   &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.UnusualBehavior{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"isUnusualUserIdentity"`, strVal, "IsUnusualUserIdentity")
				requireJmesMatch(t, jsearch, `"numberOfPast24HoursAPIsBucketProfiling"`, strVal, "NumberOfPast24HoursAPIsBucketProfiling")
				requireJmesMatch(t, jsearch, `"numberOfPast24HoursAPIsBucketUserIdentityProfiling"`, strVal, "NumberOfPast24HoursAPIsBucketUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"numberOfPast24HoursAPIsUserIdentityProfiling"`, strVal, "NumberOfPast24HoursAPIsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"unusualAPIsAccountProfiling"`, strVal, "UnusualAPIsAccountProfiling")
				requireJmesMatch(t, jsearch, `"unusualAPIsUserIdentityProfiling"`, strVal, "UnusualAPIsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"unusualASNsAccountProfiling"`, strVal, "UnusualASNsAccountProfiling")
				requireJmesMatch(t, jsearch, `"unusualASNsBucketProfiling"`, strVal, "UnusualASNsBucketProfiling")
				requireJmesMatch(t, jsearch, `"unusualASNsUserIdentityProfiling"`, strVal, "UnusualASNsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"unusualBucketsAccountProfiling"`, strVal, "UnusualBucketsAccountProfiling")
				requireJmesMatch(t, jsearch, `"unusualBucketsUserIdentityProfiling"`, strVal, "UnusualBucketsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"unusualUserAgentsAccountProfiling"`, strVal, "UnusualUserAgentsAccountProfiling")
				requireJmesMatch(t, jsearch, `"unusualUserAgentsUserIdentityProfiling"`, strVal, "UnusualUserAgentsUserIdentityProfiling")
				requireJmesMatch(t, jsearch, `"unusualUserNamesAccountProfiling"`, strVal, "UnusualUserNamesAccountProfiling")
				requireJmesMatch(t, jsearch, `"unusualUserNamesBucketProfiling"`, strVal, "UnusualUserNamesBucketProfiling")
				requireJmesMatch(t, jsearch, `"unusualUserTypesAccountProfiling"`, strVal, "UnusualUserTypesAccountProfiling")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.UnusualBehavior{IsUnusualUserIdentity: &strVal}.IsUnusualUserIdentity)
				require.Equal(t, strVal, *guard_duty_finding.UnusualBehavior{NumberOfPast24HoursAPIsBucketProfiling: &strVal}.NumberOfPast24HoursAPIsBucketProfiling)
				require.Equal(t, strVal, *guard_duty_finding.UnusualBehavior{NumberOfPast24HoursAPIsBucketUserIdentityProfiling: &strVal}.NumberOfPast24HoursAPIsBucketUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.UnusualBehavior{NumberOfPast24HoursAPIsUserIdentityProfiling: &strVal}.NumberOfPast24HoursAPIsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.UnusualBehavior{UnusualAPIsAccountProfiling: &strVal}.UnusualAPIsAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.UnusualBehavior{UnusualAPIsUserIdentityProfiling: &strVal}.UnusualAPIsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.UnusualBehavior{UnusualASNsAccountProfiling: &strVal}.UnusualASNsAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.UnusualBehavior{UnusualASNsBucketProfiling: &strVal}.UnusualASNsBucketProfiling)
				require.Equal(t, strVal, *guard_duty_finding.UnusualBehavior{UnusualASNsUserIdentityProfiling: &strVal}.UnusualASNsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.UnusualBehavior{UnusualBucketsAccountProfiling: &strVal}.UnusualBucketsAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.UnusualBehavior{UnusualBucketsUserIdentityProfiling: &strVal}.UnusualBucketsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.UnusualBehavior{UnusualUserAgentsAccountProfiling: &strVal}.UnusualUserAgentsAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.UnusualBehavior{UnusualUserAgentsUserIdentityProfiling: &strVal}.UnusualUserAgentsUserIdentityProfiling)
				require.Equal(t, strVal, *guard_duty_finding.UnusualBehavior{UnusualUserNamesAccountProfiling: &strVal}.UnusualUserNamesAccountProfiling)
				require.Equal(t, strVal, *guard_duty_finding.UnusualBehavior{UnusualUserNamesBucketProfiling: &strVal}.UnusualUserNamesBucketProfiling)
				require.Equal(t, strVal, *guard_duty_finding.UnusualBehavior{UnusualUserTypesAccountProfiling: &strVal}.UnusualUserTypesAccountProfiling)
			})
		})

		t.Run("UserAgent", func(t *testing.T) {
			genStruct := &guard_duty_finding.UserAgent{
				FullUserAgent:     &strVal,
				UserAgentCategory: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &guard_duty_finding.UserAgent{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"fullUserAgent"`, strVal, "FullUserAgent")
				requireJmesMatch(t, jsearch, `"userAgentCategory"`, strVal, "UserAgentCategory")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *guard_duty_finding.UserAgent{FullUserAgent: &strVal}.FullUserAgent)
				require.Equal(t, strVal, *guard_duty_finding.UserAgent{UserAgentCategory: &strVal}.UserAgentCategory)
			})
		})

	})

}
