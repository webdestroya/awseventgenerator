// Code generated by awseventgenerator/internal/generators/testcode. DO NOT EDIT.

package testsuitegenerated

import (
	"encoding/json"
	"github.com/stretchr/testify/require"
	"testing"
	"time"

	example1a "github.com/webdestroya/awseventgenerator/internal/testcode/example1a_gen"
)

func TestGenerated_example1a(t *testing.T) {

	strVal := "someString"
	floatVal := float64(1232.1424)
	intVal := int64(1232)
	timeVal := time.Now().UTC()
	trueVal := true
	anyVal := struct {
		Thing string `json:"thinger"`
	}{Thing: "anywayanyday"}

	require.IsType(t, *new(string), strVal)
	require.IsType(t, *new(float64), floatVal)
	require.IsType(t, *new(int64), intVal)
	require.IsType(t, *new(time.Time), timeVal)
	require.IsType(t, *new(bool), trueVal)
	_ = anyVal

	t.Run("aliases", func(t *testing.T) {
		require.IsType(t, *new([]example1a.RootItems), *new(example1a.Root))
	})

	t.Run("structs", func(t *testing.T) {
		t.Run("Dimensions", func(t *testing.T) {
			genStruct := &example1a.Dimensions{
				Height: floatVal,
				Length: floatVal,
				Width:  floatVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &example1a.Dimensions{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"height"`, floatVal, "Height")
				requireJmesMatch(t, jsearch, `"length"`, floatVal, "Length")
				requireJmesMatch(t, jsearch, `"width"`, floatVal, "Width")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, floatVal, example1a.Dimensions{Height: floatVal}.Height)
				require.Equal(t, floatVal, example1a.Dimensions{Length: floatVal}.Length)
				require.Equal(t, floatVal, example1a.Dimensions{Width: floatVal}.Width)
			})
		})

		t.Run("RootItems", func(t *testing.T) {
			genStruct := &example1a.RootItems{
				Dimensions: &example1a.Dimensions{
					Height: floatVal,
					Length: floatVal,
					Width:  floatVal,
				},
				Id:    floatVal,
				Name:  strVal,
				Price: floatVal,
				Tags:  []string{strVal},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &example1a.RootItems{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("dimensions")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"id"`, floatVal, "Id")
				requireJmesMatch(t, jsearch, `"name"`, strVal, "Name")
				requireJmesMatch(t, jsearch, `"price"`, floatVal, "Price")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("tags")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.Dimensions) // Lazily Tested: example1a.RootItems.Dimensions == *Dimensions
				require.Equal(t, floatVal, example1a.RootItems{Id: floatVal}.Id)
				require.Equal(t, strVal, example1a.RootItems{Name: strVal}.Name)
				require.Equal(t, floatVal, example1a.RootItems{Price: floatVal}.Price)
				require.Contains(t, example1a.RootItems{Tags: []string{strVal}}.Tags, strVal)
			})
		})

	})

}
