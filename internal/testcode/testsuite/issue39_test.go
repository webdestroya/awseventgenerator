// Code generated by awseventgenerator/internal/generators/testcode. DO NOT EDIT.

package testsuitegenerated

import (
	"encoding/json"
	"github.com/stretchr/testify/require"
	"testing"
	"time"

	issue39 "github.com/webdestroya/awseventgenerator/internal/testcode/issue39_gen"
)

func TestGenerated_issue39(t *testing.T) {

	strVal := "someString"
	floatVal := float64(1232.1424)
	intVal := int64(1232)
	timeVal := time.Now().UTC()
	trueVal := true
	anyVal := struct {
		Thing string `json:"thinger"`
	}{Thing: "anywayanyday"}

	require.IsType(t, *new(string), strVal)
	require.IsType(t, *new(float64), floatVal)
	require.IsType(t, *new(int64), intVal)
	require.IsType(t, *new(time.Time), timeVal)
	require.IsType(t, *new(bool), trueVal)
	_ = anyVal

	t.Run("structs", func(t *testing.T) {
		t.Run("Address", func(t *testing.T) {
			genStruct := &issue39.Address{
				Number:   &floatVal,
				Postcode: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &issue39.Address{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"number"`, floatVal, "Number")
				requireJmesMatch(t, jsearch, `"postcode"`, strVal, "Postcode")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, floatVal, *issue39.Address{Number: &floatVal}.Number)
				require.Equal(t, strVal, *issue39.Address{Postcode: &strVal}.Postcode)
			})
		})

		t.Run("OwnersItems", func(t *testing.T) {
			genStruct := &issue39.OwnersItems{
				Name: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &issue39.OwnersItems{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"name"`, strVal, "Name")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *issue39.OwnersItems{Name: &strVal}.Name)
			})
		})

		t.Run("Root", func(t *testing.T) {
			genStruct := &issue39.Root{
				Address: &issue39.Address{
					Number:   &floatVal,
					Postcode: &strVal,
				},
				Owners: []issue39.OwnersItems{{
					Name: &strVal,
				}},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &issue39.Root{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("address")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("owners")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.Address) // Lazily Tested: issue39.Root.Address == *Address
				require.NotNil(t, genStruct.Owners)  // Lazily Tested: issue39.Root.Owners == []OwnersItems
			})
		})

	})

}
