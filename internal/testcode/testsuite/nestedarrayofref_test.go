// Code generated by awseventgenerator/internal/generators/testcode. DO NOT EDIT.

package testsuitegenerated

import (
	"encoding/json"
	"github.com/stretchr/testify/require"
	"testing"
	"time"

	nestedarrayofref "github.com/webdestroya/awseventgenerator/internal/testcode/nestedarrayofref_gen"
)

func TestGenerated_nestedarrayofref(t *testing.T) {

	strVal := "someString"
	floatVal := float64(1232.1424)
	intVal := int64(1232)
	timeVal := time.Now().UTC()
	trueVal := true
	anyVal := struct {
		Thing string `json:"thinger"`
	}{Thing: "anywayanyday"}

	require.IsType(t, *new(string), strVal)
	require.IsType(t, *new(float64), floatVal)
	require.IsType(t, *new(int64), intVal)
	require.IsType(t, *new(time.Time), timeVal)
	require.IsType(t, *new(bool), trueVal)
	_ = anyVal

	t.Run("aliases", func(t *testing.T) {
		require.IsType(t, *new([][]nestedarrayofref.Tags), *new(nestedarrayofref.Root))
	})

	t.Run("structs", func(t *testing.T) {
		t.Run("BazItems", func(t *testing.T) {
			genStruct := &nestedarrayofref.BazItems{
				Qux: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &nestedarrayofref.BazItems{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"qux"`, strVal, "Qux")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, *nestedarrayofref.BazItems{Qux: &strVal}.Qux)
			})
		})

		t.Run("Foo", func(t *testing.T) {
			genStruct := &nestedarrayofref.Foo{
				Age:  &floatVal,
				Name: &strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &nestedarrayofref.Foo{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"age"`, floatVal, "Age")
				requireJmesMatch(t, jsearch, `"name"`, strVal, "Name")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, floatVal, *nestedarrayofref.Foo{Age: &floatVal}.Age)
				require.Equal(t, strVal, *nestedarrayofref.Foo{Name: &strVal}.Name)
			})
		})

		t.Run("Tags", func(t *testing.T) {
			genStruct := &nestedarrayofref.Tags{
				MainThing: &nestedarrayofref.Thing{
					Bar: []float64{floatVal},
					Baz: []nestedarrayofref.BazItems{{
						Qux: &strVal,
					}},
					Foo: &nestedarrayofref.Foo{
						Age:  &floatVal,
						Name: &strVal,
					},
				},
				Tag: &strVal,
				Things: []nestedarrayofref.Thing{{
					Bar: []float64{floatVal},
					Baz: []nestedarrayofref.BazItems{{
						Qux: &strVal,
					}},
					Foo: &nestedarrayofref.Foo{
						Age:  &floatVal,
						Name: &strVal,
					},
				}},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &nestedarrayofref.Tags{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("mainThing")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"tag"`, strVal, "Tag")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("things")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.MainThing) // Lazily Tested: nestedarrayofref.Tags.MainThing == *Thing
				require.Equal(t, strVal, *nestedarrayofref.Tags{Tag: &strVal}.Tag)
				require.NotNil(t, genStruct.Things) // Lazily Tested: nestedarrayofref.Tags.Things == []Thing
			})
		})

		t.Run("Thing", func(t *testing.T) {
			genStruct := &nestedarrayofref.Thing{
				Bar: []float64{floatVal},
				Baz: []nestedarrayofref.BazItems{{
					Qux: &strVal,
				}},
				Foo: &nestedarrayofref.Foo{
					Age:  &floatVal,
					Name: &strVal,
				},
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &nestedarrayofref.Thing{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("bar")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("baz")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("foo")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.Bar) // Lazily Tested: nestedarrayofref.Thing.Bar == []float64
				require.NotNil(t, genStruct.Baz) // Lazily Tested: nestedarrayofref.Thing.Baz == []BazItems
				require.NotNil(t, genStruct.Foo) // Lazily Tested: nestedarrayofref.Thing.Foo == *Foo
			})
		})

	})

}
