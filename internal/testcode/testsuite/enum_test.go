// Code generated by awseventgenerator/internal/generators/testcode. DO NOT EDIT.

package testsuitegenerated

import (
	"encoding/json"
	"github.com/stretchr/testify/require"
	"testing"
	"time"

	enum "github.com/webdestroya/awseventgenerator/internal/testcode/enum_gen"
)

func TestGenerated_enum(t *testing.T) {

	strVal := "someString"
	floatVal := float64(1232.1424)
	intVal := int64(1232)
	timeVal := time.Now().UTC()
	trueVal := true
	anyVal := struct {
		Thing string `json:"thinger"`
	}{Thing: "anywayanyday"}

	require.IsType(t, *new(string), strVal)
	require.IsType(t, *new(float64), floatVal)
	require.IsType(t, *new(int64), intVal)
	require.IsType(t, *new(time.Time), timeVal)
	require.IsType(t, *new(bool), trueVal)
	_ = anyVal

	t.Run("constants", func(t *testing.T) {
		require.Equal(t, `Route 53 Application Recovery Controller recovery group readiness status change`, enum.AwsEventDetailType)
		require.Equal(t, `aws.route53-recovery-readiness`, enum.AwsEventSource)
	})

	t.Run("enums", func(t *testing.T) {
		t.Run("ReadinessStatusType", func(t *testing.T) {
			require.Equal(t, "NOT_AUTHORIZED", string(enum.ReadinessStatusTypeNotAuthorized))
			require.Contains(t, enum.ReadinessStatusTypeNotAuthorized.Values(), enum.ReadinessStatusTypeNotAuthorized)

			require.Equal(t, "NOT_READY", string(enum.ReadinessStatusTypeNotReady))
			require.Contains(t, enum.ReadinessStatusTypeNotReady.Values(), enum.ReadinessStatusTypeNotReady)

			require.Equal(t, "READY", string(enum.ReadinessStatusTypeReady))
			require.Contains(t, enum.ReadinessStatusTypeReady.Values(), enum.ReadinessStatusTypeReady)

			require.Equal(t, "UNKNOWN", string(enum.ReadinessStatusTypeUnknown))
			require.Contains(t, enum.ReadinessStatusTypeUnknown.Values(), enum.ReadinessStatusTypeUnknown)

		})
	})

	t.Run("structs", func(t *testing.T) {
		t.Run("RecoveryGroupStatusChange", func(t *testing.T) {
			genStruct := &enum.RecoveryGroupStatusChange{
				NewState: &enum.State{
					ReadinessStatus: enum.ReadinessStatusType("FAKE"),
				},
				PreviousState: &enum.State{
					ReadinessStatus: enum.ReadinessStatusType("FAKE"),
				},
				RecoveryGroupName: strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &enum.RecoveryGroupStatusChange{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("new-state")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("previous-state")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"recovery-group-name"`, strVal, "RecoveryGroupName")

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.NewState)      // Lazily Tested: enum.RecoveryGroupStatusChange.NewState == *State
				require.NotNil(t, genStruct.PreviousState) // Lazily Tested: enum.RecoveryGroupStatusChange.PreviousState == *State
				require.Equal(t, strVal, enum.RecoveryGroupStatusChange{RecoveryGroupName: strVal}.RecoveryGroupName)
			})
		})

		t.Run("Root", func(t *testing.T) {
			genStruct := &enum.Root{
				Account: strVal,
				Detail: &enum.RecoveryGroupStatusChange{
					NewState: &enum.State{
						ReadinessStatus: enum.ReadinessStatusType("FAKE"),
					},
					PreviousState: &enum.State{
						ReadinessStatus: enum.ReadinessStatusType("FAKE"),
					},
					RecoveryGroupName: strVal,
				},
				DetailType: strVal,
				Id:         strVal,
				Region:     strVal,
				Resources:  []string{strVal},
				Source:     strVal,
				Time:       timeVal,
				Version:    strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &enum.Root{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"account"`, strVal, "Account")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("detail")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"detail-type"`, strVal, "DetailType")
				requireJmesMatch(t, jsearch, `"id"`, strVal, "Id")
				requireJmesMatch(t, jsearch, `"region"`, strVal, "Region")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("resources")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"source"`, strVal, "Source")
				requireJmesMatch(t, jsearch, `"time"`, string(mustRet(timeVal.MarshalText())), "Time")
				requireJmesMatch(t, jsearch, `"version"`, strVal, "Version")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, enum.Root{Account: strVal}.Account)
				require.NotNil(t, genStruct.Detail) // Lazily Tested: enum.Root.Detail == *RecoveryGroupStatusChange
				require.Equal(t, strVal, enum.Root{DetailType: strVal}.DetailType)
				require.Equal(t, strVal, enum.Root{Id: strVal}.Id)
				require.Equal(t, strVal, enum.Root{Region: strVal}.Region)
				require.Contains(t, enum.Root{Resources: []string{strVal}}.Resources, strVal)
				require.Equal(t, strVal, enum.Root{Source: strVal}.Source)
				require.Equal(t, timeVal, enum.Root{Time: timeVal}.Time)
				require.Equal(t, strVal, enum.Root{Version: strVal}.Version)
			})
		})

		t.Run("State", func(t *testing.T) {
			genStruct := &enum.State{
				ReadinessStatus: enum.ReadinessStatusType("FAKE"),
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &enum.State{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("readiness-status")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.ReadinessStatus) // Lazily Tested: enum.State.ReadinessStatus == ReadinessStatusType
			})
		})

	})

}
