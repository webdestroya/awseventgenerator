// Code generated by awseventgenerator/internal/generators/testcode. DO NOT EDIT.

package testsuitegenerated

import (
	"encoding/json"
	"github.com/stretchr/testify/require"
	"testing"
	"time"

	simpleenum "github.com/webdestroya/awseventgenerator/internal/testcode/simpleenum_gen"
)

func TestGenerated_simpleenum(t *testing.T) {

	strVal := "someString"
	floatVal := float64(1232.1424)
	intVal := int64(1232)
	timeVal := time.Now().UTC()
	trueVal := true
	anyVal := struct {
		Thing string `json:"thinger"`
	}{Thing: "anywayanyday"}

	require.IsType(t, *new(string), strVal)
	require.IsType(t, *new(float64), floatVal)
	require.IsType(t, *new(int64), intVal)
	require.IsType(t, *new(time.Time), timeVal)
	require.IsType(t, *new(bool), trueVal)
	_ = anyVal

	t.Run("constants", func(t *testing.T) {
		require.Equal(t, `Simple Enum`, simpleenum.AwsEventDetailType)
		require.Equal(t, `webdestroya.testing`, simpleenum.AwsEventSource)
	})

	t.Run("enums", func(t *testing.T) {
		t.Run("ColorType", func(t *testing.T) {
			require.Equal(t, "BLACK", string(simpleenum.ColorTypeBlack))
			require.Contains(t, simpleenum.ColorTypeBlack.Values(), simpleenum.ColorTypeBlack)

			require.Equal(t, "BLUE", string(simpleenum.ColorTypeBlue))
			require.Contains(t, simpleenum.ColorTypeBlue.Values(), simpleenum.ColorTypeBlue)

			require.Equal(t, "GRAY", string(simpleenum.ColorTypeGray))
			require.Contains(t, simpleenum.ColorTypeGray.Values(), simpleenum.ColorTypeGray)

			require.Equal(t, "GREEN", string(simpleenum.ColorTypeGreen))
			require.Contains(t, simpleenum.ColorTypeGreen.Values(), simpleenum.ColorTypeGreen)

			require.Equal(t, "RED", string(simpleenum.ColorTypeRed))
			require.Contains(t, simpleenum.ColorTypeRed.Values(), simpleenum.ColorTypeRed)

			require.Equal(t, "WHITE", string(simpleenum.ColorTypeWhite))
			require.Contains(t, simpleenum.ColorTypeWhite.Values(), simpleenum.ColorTypeWhite)

			require.Equal(t, "YELLOW", string(simpleenum.ColorTypeYellow))
			require.Contains(t, simpleenum.ColorTypeYellow.Values(), simpleenum.ColorTypeYellow)

		})
		t.Run("ReadinessStatusType", func(t *testing.T) {
			require.Equal(t, "NOT_AUTHORIZED", string(simpleenum.ReadinessStatusTypeNotAuthorized))
			require.Contains(t, simpleenum.ReadinessStatusTypeNotAuthorized.Values(), simpleenum.ReadinessStatusTypeNotAuthorized)

			require.Equal(t, "NOT_READY", string(simpleenum.ReadinessStatusTypeNotReady))
			require.Contains(t, simpleenum.ReadinessStatusTypeNotReady.Values(), simpleenum.ReadinessStatusTypeNotReady)

			require.Equal(t, "READY", string(simpleenum.ReadinessStatusTypeReady))
			require.Contains(t, simpleenum.ReadinessStatusTypeReady.Values(), simpleenum.ReadinessStatusTypeReady)

			require.Equal(t, "UNKNOWN", string(simpleenum.ReadinessStatusTypeUnknown))
			require.Contains(t, simpleenum.ReadinessStatusTypeUnknown.Values(), simpleenum.ReadinessStatusTypeUnknown)

		})
	})

	t.Run("structs", func(t *testing.T) {
		t.Run("RecoveryGroupStatusChange", func(t *testing.T) {
			genStruct := &simpleenum.RecoveryGroupStatusChange{
				Color1: simpleenum.ColorType("FAKE"),
				Color2: simpleenum.ColorType("FAKE"),
				NewState: &simpleenum.State{
					ReadinessStatus: simpleenum.ReadinessStatusType("FAKE"),
				},
				PreviousState: &simpleenum.State{
					ReadinessStatus: simpleenum.ReadinessStatusType("FAKE"),
				},
				RecoveryGroupName: strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &simpleenum.RecoveryGroupStatusChange{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("color1")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("color2")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("new-state")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("previous-state")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"recovery-group-name"`, strVal, "RecoveryGroupName")

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.Color1)        // Lazily Tested: simpleenum.RecoveryGroupStatusChange.Color1 == ColorType
				require.NotNil(t, genStruct.Color2)        // Lazily Tested: simpleenum.RecoveryGroupStatusChange.Color2 == ColorType
				require.NotNil(t, genStruct.NewState)      // Lazily Tested: simpleenum.RecoveryGroupStatusChange.NewState == *State
				require.NotNil(t, genStruct.PreviousState) // Lazily Tested: simpleenum.RecoveryGroupStatusChange.PreviousState == *State
				require.Equal(t, strVal, simpleenum.RecoveryGroupStatusChange{RecoveryGroupName: strVal}.RecoveryGroupName)
			})
		})

		t.Run("Root", func(t *testing.T) {
			genStruct := &simpleenum.Root{
				Account: strVal,
				Color:   simpleenum.ColorType("FAKE"),
				Detail: &simpleenum.RecoveryGroupStatusChange{
					Color1: simpleenum.ColorType("FAKE"),
					Color2: simpleenum.ColorType("FAKE"),
					NewState: &simpleenum.State{
						ReadinessStatus: simpleenum.ReadinessStatusType("FAKE"),
					},
					PreviousState: &simpleenum.State{
						ReadinessStatus: simpleenum.ReadinessStatusType("FAKE"),
					},
					RecoveryGroupName: strVal,
				},
				DetailType: strVal,
				Id:         strVal,
				NewColor:   simpleenum.ColorType("FAKE"),
				Resources:  []string{strVal},
				Source:     strVal,
				Time:       timeVal,
				Version:    strVal,
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &simpleenum.Root{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				requireJmesMatch(t, jsearch, `"account"`, strVal, "Account")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("color")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("detail")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"detail-type"`, strVal, "DetailType")
				requireJmesMatch(t, jsearch, `"id"`, strVal, "Id")
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("new-color")`).(float64), 1.0)
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("resources")`).(float64), 1.0)
				requireJmesMatch(t, jsearch, `"source"`, strVal, "Source")
				requireJmesMatch(t, jsearch, `"time"`, string(mustRet(timeVal.MarshalText())), "Time")
				requireJmesMatch(t, jsearch, `"version"`, strVal, "Version")

			})
			t.Run("fields", func(t *testing.T) {
				require.Equal(t, strVal, simpleenum.Root{Account: strVal}.Account)
				require.NotNil(t, genStruct.Color)  // Lazily Tested: simpleenum.Root.Color == ColorType
				require.NotNil(t, genStruct.Detail) // Lazily Tested: simpleenum.Root.Detail == *RecoveryGroupStatusChange
				require.Equal(t, strVal, simpleenum.Root{DetailType: strVal}.DetailType)
				require.Equal(t, strVal, simpleenum.Root{Id: strVal}.Id)
				require.NotNil(t, genStruct.NewColor) // Lazily Tested: simpleenum.Root.NewColor == ColorType
				require.Contains(t, simpleenum.Root{Resources: []string{strVal}}.Resources, strVal)
				require.Equal(t, strVal, simpleenum.Root{Source: strVal}.Source)
				require.Equal(t, timeVal, simpleenum.Root{Time: timeVal}.Time)
				require.Equal(t, strVal, simpleenum.Root{Version: strVal}.Version)
			})
		})

		t.Run("State", func(t *testing.T) {
			genStruct := &simpleenum.State{
				ReadinessStatus: simpleenum.ReadinessStatusType("FAKE"),
			}
			t.Run("json", func(t *testing.T) {
				jsonOut, err := json.Marshal(genStruct)
				require.NoError(t, err)

				unmarObj := &simpleenum.State{}
				require.NoError(t, json.Unmarshal(jsonOut, unmarObj))

				jsonOut2, err := json.Marshal(unmarObj)
				require.NoError(t, err)
				require.JSONEq(t, string(jsonOut), string(jsonOut2))

				var jsearch interface{}
				require.NoError(t, json.Unmarshal(jsonOut, &jsearch))
				require.GreaterOrEqual(t, jmesMatch(t, jsearch, `length("readiness-status")`).(float64), 1.0)

			})
			t.Run("fields", func(t *testing.T) {
				require.NotNil(t, genStruct.ReadinessStatus) // Lazily Tested: simpleenum.State.ReadinessStatus == ReadinessStatusType
			})
		})

	})

}
